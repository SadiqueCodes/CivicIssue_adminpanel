{"version":3,"sources":["../src/index.ts","../src/utils/cn.ts","../src/utils/constants.ts","../src/types/index.ts","../src/providers/query-provider.tsx"],"sourcesContent":["export * from './utils/cn';\nexport * from './utils/constants';\nexport * from './types';\nexport * from './providers';\n","import { clsx, type ClassValue } from 'clsx';\n\n/**\n * Utility function to merge class names\n * Combines clsx functionality for conditional classes\n */\nexport function cn(...inputs: ClassValue[]) {\n  return clsx(inputs);\n}\n","/**\n * Application-wide constants\n */\n\nexport const APP_NAME = 'Digital Employee Platform';\nexport const APP_VERSION = '0.1.0';\n\nexport const API_ENDPOINTS = {\n  AUTH: '/api/auth',\n  CHAT: '/api/chat',\n  FILES: '/api/files',\n  TASKS: '/api/tasks',\n} as const;\n\nexport const DE_TYPES = {\n  DA: 'data-analyst',\n  CSR: 'customer-service',\n  SA: 'sales-agent',\n  HR: 'hr-assistant',\n} as const;\n\nexport const TASK_STATUS = {\n  RUNNING: 'running',\n  COMPLETED: 'completed',\n  ERROR: 'error',\n  IDLE: 'idle',\n} as const;\n\nexport const MESSAGE_TYPES = {\n  USER: 'user',\n  ASSISTANT: 'assistant',\n  SYSTEM: 'system',\n  ERROR: 'error',\n} as const;\n\nexport const FILE_SIZE_LIMITS = {\n  IMAGE: 10 * 1024 * 1024, // 10MB\n  DOCUMENT: 25 * 1024 * 1024, // 25MB\n  MAX_FILES_PER_MESSAGE: 5,\n} as const;\n\nexport const SUPPORTED_FILE_TYPES = {\n  IMAGES: ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml'],\n  DOCUMENTS: ['application/pdf', 'text/csv', 'application/vnd.ms-excel'],\n} as const;\n","import { z } from 'zod';\n\nimport { DE_TYPES, MESSAGE_TYPES, TASK_STATUS } from '../utils/constants';\n\n// Digital Employee types\nexport type TDEType = (typeof DE_TYPES)[keyof typeof DE_TYPES];\n\n// Task types\nexport type TTaskStatus = (typeof TASK_STATUS)[keyof typeof TASK_STATUS];\n\nexport interface ITask {\n  id: string;\n  title: string;\n  deType: TDEType;\n  status: TTaskStatus;\n  createdAt: Date;\n  updatedAt: Date;\n  lastMessage?: string;\n}\n\n// Message types\nexport type TMessageType = (typeof MESSAGE_TYPES)[keyof typeof MESSAGE_TYPES];\n\nexport interface IMessage {\n  id: string;\n  taskId: string;\n  type: TMessageType;\n  content: string;\n  timestamp: Date;\n  attachments?: IAttachment[];\n  metadata?: Record<string, unknown>;\n}\n\n// File/Attachment types\nexport interface IAttachment {\n  id: string;\n  name: string;\n  size: number;\n  type: string;\n  url: string;\n  thumbnailUrl?: string;\n}\n\n// User types\nexport interface IUser {\n  id: string;\n  email: string;\n  name?: string;\n  avatar?: string;\n  preferences?: IUserPreferences;\n}\n\nexport interface IUserPreferences {\n  theme: 'light' | 'dark' | 'system';\n  defaultDE?: TDEType;\n  notifications: boolean;\n}\n\n// API Response types\nexport interface IApiResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  metadata?: {\n    timestamp: string;\n    requestId: string;\n  };\n}\n\n// Validation schemas\nexport const UserSchema = z.object({\n  id: z.string(),\n  email: z.string().email(),\n  name: z.string().optional(),\n  avatar: z.string().url().optional(),\n});\n\nexport const MessageSchema = z.object({\n  id: z.string(),\n  taskId: z.string(),\n  type: z.enum(['user', 'assistant', 'system', 'error']),\n  content: z.string(),\n  timestamp: z.date(),\n});\n","'use client';\n\nimport React, { ReactNode, useState } from 'react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\nexport interface QueryProviderProps {\n  children: ReactNode;\n  options?: {\n    staleTime?: number;\n    gcTime?: number;\n    retry?: number;\n    refetchOnWindowFocus?: boolean;\n  };\n}\n\nexport function QueryProvider({ children, options = {} }: QueryProviderProps): JSX.Element {\n  const {\n    staleTime = 60 * 1000, // 1 minute\n    gcTime = 5 * 60 * 1000, // 5 minutes\n    retry = 1,\n    refetchOnWindowFocus = false,\n  } = options;\n\n  const [queryClient] = useState(\n    () =>\n      new QueryClient({\n        defaultOptions: {\n          queries: {\n            staleTime,\n            gcTime,\n            retry,\n            refetchOnWindowFocus,\n          },\n        },\n      })\n  );\n\n  return <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>;\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,kBAAsC;AAM/B,SAAS,MAAM,QAAsB;AAC1C,aAAO,kBAAK,MAAM;AACpB;;;ACJO,IAAM,WAAW;AACjB,IAAM,cAAc;AAEpB,IAAM,gBAAgB;AAAA,EAC3B,MAAM;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AAAA,EACP,OAAO;AACT;AAEO,IAAM,WAAW;AAAA,EACtB,IAAI;AAAA,EACJ,KAAK;AAAA,EACL,IAAI;AAAA,EACJ,IAAI;AACN;AAEO,IAAM,cAAc;AAAA,EACzB,SAAS;AAAA,EACT,WAAW;AAAA,EACX,OAAO;AAAA,EACP,MAAM;AACR;AAEO,IAAM,gBAAgB;AAAA,EAC3B,MAAM;AAAA,EACN,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,OAAO;AACT;AAEO,IAAM,mBAAmB;AAAA,EAC9B,OAAO,KAAK,OAAO;AAAA;AAAA,EACnB,UAAU,KAAK,OAAO;AAAA;AAAA,EACtB,uBAAuB;AACzB;AAEO,IAAM,uBAAuB;AAAA,EAClC,QAAQ,CAAC,cAAc,aAAa,aAAa,cAAc,eAAe;AAAA,EAC9E,WAAW,CAAC,mBAAmB,YAAY,0BAA0B;AACvE;;;AC5CA,iBAAkB;AAsEX,IAAM,aAAa,aAAE,OAAO;AAAA,EACjC,IAAI,aAAE,OAAO;AAAA,EACb,OAAO,aAAE,OAAO,EAAE,MAAM;AAAA,EACxB,MAAM,aAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,QAAQ,aAAE,OAAO,EAAE,IAAI,EAAE,SAAS;AACpC,CAAC;AAEM,IAAM,gBAAgB,aAAE,OAAO;AAAA,EACpC,IAAI,aAAE,OAAO;AAAA,EACb,QAAQ,aAAE,OAAO;AAAA,EACjB,MAAM,aAAE,KAAK,CAAC,QAAQ,aAAa,UAAU,OAAO,CAAC;AAAA,EACrD,SAAS,aAAE,OAAO;AAAA,EAClB,WAAW,aAAE,KAAK;AACpB,CAAC;;;ACjFD,mBAA2C;AAC3C,yBAAiD;AAY1C,SAAS,cAAc,EAAE,UAAU,UAAU,CAAC,EAAE,GAAoC;AACzF,QAAM;AAAA,IACJ,YAAY,KAAK;AAAA;AAAA,IACjB,SAAS,IAAI,KAAK;AAAA;AAAA,IAClB,QAAQ;AAAA,IACR,uBAAuB;AAAA,EACzB,IAAI;AAEJ,QAAM,CAAC,WAAW,QAAI;AAAA,IACpB,MACE,IAAI,+BAAY;AAAA,MACd,gBAAgB;AAAA,QACd,SAAS;AAAA,UACP;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACL;AAEA,SAAO,6BAAAA,QAAA,cAAC,0CAAoB,QAAQ,eAAc,QAAS;AAC7D;","names":["React"]}