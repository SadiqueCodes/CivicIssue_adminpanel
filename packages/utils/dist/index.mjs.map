{"version":3,"sources":["../constants/chat-interface/default-config.constants.ts","../constants/chat-interface/chat-suggestions.constants.ts","../chat-interface/configMerger.ts","../lib/api-client.ts","../lib/conversation-storage.ts","../lib/missing-sdk-exports.ts","../lib/session-manager.ts","../lib/session-html-storage.ts","../api-functions.ts"],"sourcesContent":["import { IChatConfiguration } from '../../chat-interface-types/chat-config.types';\n\nexport const DEFAULT_CHAT_CONFIG: IChatConfiguration = {\n  theme: {\n    backgroundGradient: {\n      from: '#151515',\n      to: '#FFFFFF',\n    },\n    chatWindowBackground: '#ffffff',\n    headerBackgroundColor: '#2563eb',\n    chatButtonColor: '#151518',\n  },\n  branding: {\n    companyName: 'Hi There,',\n    botName: 'Chat Assistant',\n    tagline: 'Here to help you',\n  },\n  typography: {\n    fontFamily: 'Inter, system-ui, sans-serif',\n    fontSize: {\n      small: '0.875rem',\n      medium: '1rem',\n      large: '1.125rem',\n    },\n  },\n  dimensions: {\n    minWidth: 280,\n    minHeight: 400,\n    maxWidth: 500,\n    maxHeight: 700,\n  },\n  content: {\n    welcomeMessage: 'I am Chat assistant. I am here to help you with whatever you need',\n    inputPlaceholder: 'Write your query here...',\n    defaultMessages: [],\n  },\n  behavior: {\n    showCloseButton: true,\n    showExpandButton: true,\n    showColumnsButton: false,\n    enableAttachments: true,\n    enableImagePreview: true,\n    autoScroll: true,\n  },\n} as const;\n","export const CHAT_SUGGESTIONS = [\n  {\n    id: 'order-status',\n    text: 'Track my order status',\n    category: 'orders',\n  },\n  // {\n  //   id: 'return-exchange',\n  //   text: 'Return or exchange an item',\n  //   category: 'returns',\n  // },\n  {\n    id: 'payment-billing',\n    text: 'Help with payment or billing',\n    category: 'billing',\n  },\n  {\n    id: 'product-info',\n    text: 'What are the top-selling diamond Rings?',\n    category: 'products',\n  },\n  // {\n  //   id: 'shipping-delivery',\n  //   text: 'Shipping and delivery options',\n  //   category: 'shipping',\n  // },\n  // {\n  //   id: 'account-help',\n  //   text: 'Account settings and login issues',\n  //   category: 'account',\n  // },\n] as const;\n\nexport const DEFAULT_SUGGESTIONS = CHAT_SUGGESTIONS.slice(0, 3);\n","import { IChatConfiguration } from '../chat-interface-types';\nimport { DEFAULT_CHAT_CONFIG } from '../constants';\n\ninterface IURLHeaderConfig {\n  headerBgColor?: string | null;\n  botName?: string | null;\n  tagline?: string | null;\n  gradientFrom?: string | null;\n  gradientTo?: string | null;\n  chatButtonColor?: string | null;\n}\n\n/**\n * Merges URL parameters with default chat configuration\n */\nexport const mergeUrlConfigWithDefaults = (urlConfig?: IURLHeaderConfig): IChatConfiguration => {\n  const config = { ...DEFAULT_CHAT_CONFIG };\n\n  if (urlConfig?.headerBgColor) {\n    config.theme.headerBackgroundColor = urlConfig.headerBgColor;\n  }\n\n  if (urlConfig?.botName) {\n    config.branding.botName = urlConfig.botName;\n  }\n\n  if (urlConfig?.tagline) {\n    config.branding.tagline = urlConfig.tagline;\n  }\n\n  if (urlConfig?.gradientFrom) {\n    config.theme.backgroundGradient.from = urlConfig.gradientFrom;\n  }\n\n  if (urlConfig?.gradientTo) {\n    config.theme.backgroundGradient.to = urlConfig.gradientTo;\n  }\n\n  if (urlConfig?.chatButtonColor) {\n    config.theme.chatButtonColor = urlConfig.chatButtonColor;\n  }\n\n  return config;\n};\n\n/**\n * Gets configuration from window.customHeaderConfig if available\n * Only applies custom config when in embedded mode\n */\nexport const getUrlBasedConfig = (): IChatConfiguration => {\n  const isEmbedded =\n    typeof window !== 'undefined' &&\n    new URLSearchParams(window.location.search).get('embedded') === 'true';\n\n  if (\n    isEmbedded &&\n    typeof window !== 'undefined' &&\n    (window as unknown as { customHeaderConfig?: IURLHeaderConfig }).customHeaderConfig\n  ) {\n    // eslint-disable-next-line no-console\n    //   '🔧 Found window.customHeaderConfig (embedded mode):',\n    //   (window as unknown as { customHeaderConfig?: IURLHeaderConfig }).customHeaderConfig\n    // );\n    const mergedConfig = mergeUrlConfigWithDefaults(\n      (window as unknown as { customHeaderConfig?: IURLHeaderConfig }).customHeaderConfig\n    );\n    // eslint-disable-next-line no-console\n    return mergedConfig;\n  }\n  // eslint-disable-next-line no-console\n  return DEFAULT_CHAT_CONFIG;\n};\n","/**\n * Enhanced API Client with Bearer Token Authentication\n * Handles all API communications with automatic token management\n */\n\nimport axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\n\nexport interface IApiError {\n  message: string;\n  code: string;\n  statusCode: number;\n  details?: any;\n}\n\nexport interface IApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: IApiError;\n  message?: string;\n  timestamp: string;\n}\n\nexport interface IAuthTokens {\n  accessToken: string;\n  refreshToken?: string;\n  expiresAt?: string;\n  tokenType?: 'Bearer';\n}\n\nclass ApiClient {\n  private axiosInstance: AxiosInstance;\n  private baseURL: string;\n  private tokens: IAuthTokens | null = null;\n  private refreshPromise: Promise<string> | null = null;\n\n  constructor(baseURL: string = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8080/api') {\n    this.baseURL = baseURL;\n    \n    this.axiosInstance = axios.create({\n      baseURL: this.baseURL,\n      timeout: 30000, // 30 seconds\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n\n    this.setupInterceptors();\n    this.loadTokensFromStorage();\n  }\n\n  private setupInterceptors(): void {\n    // Request interceptor - Add bearer token\n    this.axiosInstance.interceptors.request.use(\n      (config) => {\n        if (this.tokens?.accessToken) {\n          config.headers.Authorization = `Bearer ${this.tokens.accessToken}`;\n        }\n        \n        // Add request ID for tracking\n        config.headers['X-Request-ID'] = this.generateRequestId();\n        \n        return config;\n      },\n      (error) => {\n        return Promise.reject(this.formatError(error));\n      }\n    );\n\n    // Response interceptor - Handle token refresh and errors\n    this.axiosInstance.interceptors.response.use(\n      (response) => {\n        return response;\n      },\n      async (error) => {\n        const originalRequest = error.config;\n\n        // Handle 401 Unauthorized - Token expired\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true;\n\n          try {\n            const newToken = await this.refreshAccessToken();\n            originalRequest.headers.Authorization = `Bearer ${newToken}`;\n            return this.axiosInstance(originalRequest);\n          } catch (refreshError) {\n            this.clearTokens();\n            window.dispatchEvent(new CustomEvent('auth:token-expired'));\n            return Promise.reject(this.formatError(refreshError));\n          }\n        }\n\n        return Promise.reject(this.formatError(error));\n      }\n    );\n  }\n\n  private generateRequestId(): string {\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private formatError(error: any): IApiError {\n    if (error.response) {\n      return {\n        message: error.response.data?.message || error.message || 'API request failed',\n        code: error.response.data?.code || 'API_ERROR',\n        statusCode: error.response.status,\n        details: error.response.data\n      };\n    }\n\n    if (error.request) {\n      return {\n        message: 'Network error - Unable to reach server',\n        code: 'NETWORK_ERROR',\n        statusCode: 0,\n        details: error.request\n      };\n    }\n\n    return {\n      message: error.message || 'Unknown error occurred',\n      code: 'UNKNOWN_ERROR',\n      statusCode: 0,\n      details: error\n    };\n  }\n\n  private loadTokensFromStorage(): void {\n    try {\n      const stored = localStorage.getItem('ashi_widget_tokens');\n      if (stored) {\n        this.tokens = JSON.parse(stored);\n        \n        // Check if token is expired\n        if (this.tokens?.expiresAt) {\n          const expiresAt = new Date(this.tokens.expiresAt);\n          if (expiresAt <= new Date()) {\n            this.clearTokens();\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load tokens from storage:', error);\n      this.clearTokens();\n    }\n  }\n\n  private saveTokensToStorage(): void {\n    try {\n      if (this.tokens) {\n        localStorage.setItem('ashi_widget_tokens', JSON.stringify(this.tokens));\n      } else {\n        localStorage.removeItem('ashi_widget_tokens');\n      }\n    } catch (error) {\n      console.error('Failed to save tokens to storage:', error);\n    }\n  }\n\n  private async refreshAccessToken(): Promise<string> {\n    if (this.refreshPromise) {\n      return this.refreshPromise;\n    }\n\n    if (!this.tokens?.refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    this.refreshPromise = this.performTokenRefresh();\n    \n    try {\n      const newToken = await this.refreshPromise;\n      this.refreshPromise = null;\n      return newToken;\n    } catch (error) {\n      this.refreshPromise = null;\n      throw error;\n    }\n  }\n\n  private async performTokenRefresh(): Promise<string> {\n    try {\n      const response = await axios.post(`${this.baseURL}/auth/refresh`, {\n        refreshToken: this.tokens?.refreshToken\n      });\n\n      const { accessToken, refreshToken, expiresAt } = response.data;\n      \n      this.tokens = {\n        accessToken,\n        refreshToken: refreshToken || this.tokens?.refreshToken,\n        expiresAt,\n        tokenType: 'Bearer'\n      };\n\n      this.saveTokensToStorage();\n      return accessToken;\n    } catch (error) {\n      this.clearTokens();\n      throw error;\n    }\n  }\n\n  // Public methods\n  public setTokens(tokens: IAuthTokens): void {\n    this.tokens = tokens;\n    this.saveTokensToStorage();\n  }\n\n  public getTokens(): IAuthTokens | null {\n    return this.tokens;\n  }\n\n  public clearTokens(): void {\n    this.tokens = null;\n    this.saveTokensToStorage();\n  }\n\n  public isAuthenticated(): boolean {\n    if (!this.tokens?.accessToken) return false;\n    \n    if (this.tokens.expiresAt) {\n      const expiresAt = new Date(this.tokens.expiresAt);\n      return expiresAt > new Date();\n    }\n    \n    return true;\n  }\n\n  // HTTP Methods\n  public async get<T = any>(url: string, config?: AxiosRequestConfig): Promise<IApiResponse<T>> {\n    try {\n      const response: AxiosResponse<T> = await this.axiosInstance.get(url, config);\n      return {\n        success: true,\n        data: response.data,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as IApiError,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  public async post<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<IApiResponse<T>> {\n    try {\n      const response: AxiosResponse<T> = await this.axiosInstance.post(url, data, config);\n      return {\n        success: true,\n        data: response.data,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as IApiError,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  public async put<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<IApiResponse<T>> {\n    try {\n      const response: AxiosResponse<T> = await this.axiosInstance.put(url, data, config);\n      return {\n        success: true,\n        data: response.data,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as IApiError,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  public async delete<T = any>(url: string, config?: AxiosRequestConfig): Promise<IApiResponse<T>> {\n    try {\n      const response: AxiosResponse<T> = await this.axiosInstance.delete(url, config);\n      return {\n        success: true,\n        data: response.data,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as IApiError,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  // Streaming support for chat\n  public async stream(url: string, data?: any, onChunk?: (chunk: string) => void): Promise<void> {\n    try {\n      const headers: Record<string, string> = {\n        'Accept': 'text/event-stream',\n        'Cache-Control': 'no-cache'\n      };\n\n      if (this.tokens?.accessToken) {\n        headers.Authorization = `Bearer ${this.tokens.accessToken}`;\n      }\n\n      const response = await fetch(`${this.baseURL}${url}`, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(data)\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const reader = response.body?.getReader();\n      if (!reader) {\n        throw new Error('Failed to get response reader');\n      }\n\n      const decoder = new TextDecoder();\n\n      while (true) {\n        const { done, value } = await reader.read();\n        \n        if (done) break;\n\n        const chunk = decoder.decode(value, { stream: true });\n        const lines = chunk.split('\\n');\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.substring(6);\n            if (data.trim() && data !== '[DONE]') {\n              onChunk?.(data);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Streaming error:', error);\n      throw this.formatError(error);\n    }\n  }\n\n  // File upload support\n  public async uploadFile<T = any>(url: string, file: File, onProgress?: (progress: number) => void): Promise<IApiResponse<T>> {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const config: AxiosRequestConfig = {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        onUploadProgress: (progressEvent) => {\n          if (progressEvent.total) {\n            const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n            onProgress?.(progress);\n          }\n        }\n      };\n\n      const response: AxiosResponse<T> = await this.axiosInstance.post(url, formData, config);\n      return {\n        success: true,\n        data: response.data,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error as IApiError,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  // Health check\n  public async healthCheck(): Promise<boolean> {\n    try {\n      const response = await this.get('/health');\n      return response.success;\n    } catch {\n      return false;\n    }\n  }\n}\n\n// Singleton instance\nexport const apiClient = new ApiClient();","/**\n * Conversation Storage System\n * Handles persistent storage of conversations using localStorage with fallback\n */\n\nimport { IChatMessage } from '../chat-interface-types/message.types';\n\nexport interface IConversation {\n  id: string;\n  sessionId: string;\n  userId?: string;\n  title: string;\n  messages: IChatMessage[];\n  createdAt: string;\n  updatedAt: string;\n  metadata: {\n    messageCount: number;\n    lastMessageType: string;\n    tags: string[];\n  };\n}\n\nexport interface IConversationSummary {\n  id: string;\n  title: string;\n  lastMessage: string;\n  messageCount: number;\n  updatedAt: string;\n  tags: string[];\n}\n\nclass ConversationStorage {\n  private readonly STORAGE_KEY = 'ashi_widget_conversations';\n  private readonly SESSION_STORAGE_KEY = 'ashi_widget_current_conversations';\n  private readonly MAX_CONVERSATIONS = 50; // Limit to prevent localStorage overflow\n  private readonly MAX_MESSAGES_PER_CONVERSATION = 1000;\n\n  constructor() {\n    // Only initialize storage on client-side\n    if (typeof window !== 'undefined') {\n      this.initializeStorage();\n    }\n  }\n\n  private initializeStorage(): void {\n    try {\n      // Check if storage is available before using it\n      if (!this.isStorageAvailable()) {\n        console.warn('localStorage is not available');\n        return;\n      }\n\n      // Initialize localStorage\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      if (!stored) {\n        localStorage.setItem(this.STORAGE_KEY, JSON.stringify({}));\n      }\n      \n      // Initialize sessionStorage\n      const sessionStored = sessionStorage.getItem(this.SESSION_STORAGE_KEY);\n      if (!sessionStored) {\n        sessionStorage.setItem(this.SESSION_STORAGE_KEY, JSON.stringify({}));\n      }\n    } catch (error) {\n      console.warn('Failed to initialize conversation storage:', error);\n    }\n  }\n\n  private isStorageAvailable(): boolean {\n    try {\n      const testKey = '__storage_test__';\n      localStorage.setItem(testKey, 'test');\n      localStorage.removeItem(testKey);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  private getStoredConversations(): Record<string, IConversation> {\n    try {\n      if (!this.isStorageAvailable()) return {};\n      \n      // First try sessionStorage (current session conversations)\n      const sessionStored = sessionStorage.getItem(this.SESSION_STORAGE_KEY);\n      if (sessionStored) {\n        const sessionConversations = JSON.parse(sessionStored);\n        if (Object.keys(sessionConversations).length > 0) {\n          return sessionConversations;\n        }\n      }\n      \n      // Fallback to localStorage (persistent conversations)\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      return stored ? JSON.parse(stored) : {};\n    } catch (error) {\n      console.error('Failed to read conversations from storage:', error);\n      return {};\n    }\n  }\n\n  private saveConversations(conversations: Record<string, IConversation>): boolean {\n    try {\n      if (!this.isStorageAvailable()) return false;\n      \n      // Cleanup old conversations if we exceed the limit\n      const conversationArray = Object.values(conversations);\n      if (conversationArray.length > this.MAX_CONVERSATIONS) {\n        // Sort by updatedAt and keep only the most recent\n        conversationArray.sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime());\n        const keepConversations = conversationArray.slice(0, this.MAX_CONVERSATIONS);\n        conversations = keepConversations.reduce((acc, conv) => {\n          acc[conv.id] = conv;\n          return acc;\n        }, {} as Record<string, IConversation>);\n      }\n\n      // Save to both sessionStorage (for refresh persistence) and localStorage (for long-term)\n      sessionStorage.setItem(this.SESSION_STORAGE_KEY, JSON.stringify(conversations));\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(conversations));\n      return true;\n    } catch (error) {\n      console.error('Failed to save conversations to storage:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Create a new conversation\n   */\n  createConversation(sessionId: string, userId?: string, title?: string): IConversation {\n    const now = new Date().toISOString();\n    const conversation: IConversation = {\n      id: `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      sessionId,\n      userId,\n      title: title || `Conversation ${new Date().toLocaleDateString()}`,\n      messages: [],\n      createdAt: now,\n      updatedAt: now,\n      metadata: {\n        messageCount: 0,\n        lastMessageType: '',\n        tags: []\n      }\n    };\n\n    const conversations = this.getStoredConversations();\n    conversations[conversation.id] = conversation;\n    this.saveConversations(conversations);\n\n    return conversation;\n  }\n\n  /**\n   * Get a conversation by ID\n   */\n  getConversation(conversationId: string): IConversation | null {\n    const conversations = this.getStoredConversations();\n    return conversations[conversationId] || null;\n  }\n\n  /**\n   * Get all conversations for a session\n   */\n  getConversationsBySession(sessionId: string): IConversation[] {\n    const conversations = this.getStoredConversations();\n    return Object.values(conversations)\n      .filter(conv => conv.sessionId === sessionId)\n      .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime());\n  }\n\n  /**\n   * Get conversation summaries for listing\n   */\n  getConversationSummaries(sessionId?: string): IConversationSummary[] {\n    const conversations = this.getStoredConversations();\n    let conversationList = Object.values(conversations);\n\n    if (sessionId) {\n      conversationList = conversationList.filter(conv => conv.sessionId === sessionId);\n    }\n\n    return conversationList\n      .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())\n      .map(conv => ({\n        id: conv.id,\n        title: conv.title,\n        lastMessage: conv.messages.length > 0 \n          ? conv.messages[conv.messages.length - 1].content.slice(0, 100) + '...'\n          : 'No messages yet',\n        messageCount: conv.metadata.messageCount,\n        updatedAt: conv.updatedAt,\n        tags: conv.metadata.tags\n      }));\n  }\n\n  /**\n   * Add a message to a conversation\n   */\n  addMessage(conversationId: string, message: IChatMessage): boolean {\n    const conversations = this.getStoredConversations();\n    const conversation = conversations[conversationId];\n\n    if (!conversation) {\n      console.error(`Conversation ${conversationId} not found`);\n      return false;\n    }\n\n    // Limit messages per conversation\n    if (conversation.messages.length >= this.MAX_MESSAGES_PER_CONVERSATION) {\n      // Remove oldest messages to make room\n      conversation.messages = conversation.messages.slice(-this.MAX_MESSAGES_PER_CONVERSATION + 1);\n    }\n\n    conversation.messages.push(message);\n    conversation.updatedAt = new Date().toISOString();\n    conversation.metadata.messageCount = conversation.messages.length;\n    conversation.metadata.lastMessageType = message.type;\n\n    // Auto-update title if it's the default and we have messages\n    if (conversation.title.startsWith('Conversation ') && conversation.messages.length === 2) {\n      // Use first user message as title (usually the second message after welcome)\n      const firstUserMessage = conversation.messages.find(m => m.type === 'user');\n      if (firstUserMessage) {\n        conversation.title = firstUserMessage.content.slice(0, 50) + (firstUserMessage.content.length > 50 ? '...' : '');\n      }\n    }\n\n    return this.saveConversations(conversations);\n  }\n\n  /**\n   * Update conversation metadata\n   */\n  updateConversation(conversationId: string, updates: Partial<IConversation>): boolean {\n    const conversations = this.getStoredConversations();\n    const conversation = conversations[conversationId];\n\n    if (!conversation) {\n      return false;\n    }\n\n    Object.assign(conversation, updates, {\n      updatedAt: new Date().toISOString()\n    });\n\n    return this.saveConversations(conversations);\n  }\n\n  /**\n   * Delete a conversation\n   */\n  deleteConversation(conversationId: string): boolean {\n    const conversations = this.getStoredConversations();\n    \n    if (!conversations[conversationId]) {\n      return false;\n    }\n\n    delete conversations[conversationId];\n    return this.saveConversations(conversations);\n  }\n\n  /**\n   * Search messages across conversations\n   */\n  searchMessages(query: string, sessionId?: string): Array<{\n    conversationId: string;\n    conversationTitle: string;\n    message: IChatMessage;\n    matchScore: number;\n  }> {\n    const conversations = this.getStoredConversations();\n    const results: Array<{\n      conversationId: string;\n      conversationTitle: string;\n      message: IChatMessage;\n      matchScore: number;\n    }> = [];\n\n    const searchTerm = query.toLowerCase().trim();\n    if (!searchTerm) return results;\n\n    Object.values(conversations).forEach(conversation => {\n      if (sessionId && conversation.sessionId !== sessionId) return;\n\n      conversation.messages.forEach(message => {\n        const content = message.content.toLowerCase();\n        if (content.includes(searchTerm)) {\n          // Simple scoring based on how well the term matches\n          const exactMatch = content === searchTerm;\n          const startsWith = content.startsWith(searchTerm);\n          const wordMatch = content.split(' ').includes(searchTerm);\n          \n          let matchScore = 1;\n          if (exactMatch) matchScore = 10;\n          else if (startsWith) matchScore = 7;\n          else if (wordMatch) matchScore = 5;\n          else matchScore = 2;\n\n          results.push({\n            conversationId: conversation.id,\n            conversationTitle: conversation.title,\n            message,\n            matchScore\n          });\n        }\n      });\n    });\n\n    return results.sort((a, b) => b.matchScore - a.matchScore);\n  }\n\n  /**\n   * Export conversation data\n   */\n  exportConversation(conversationId: string): string | null {\n    const conversation = this.getConversation(conversationId);\n    if (!conversation) return null;\n\n    return JSON.stringify(conversation, null, 2);\n  }\n\n  /**\n   * Import conversation data\n   */\n  importConversation(conversationData: string): boolean {\n    try {\n      const conversation: IConversation = JSON.parse(conversationData);\n      \n      // Validate the conversation structure\n      if (!conversation.id || !conversation.sessionId || !Array.isArray(conversation.messages)) {\n        throw new Error('Invalid conversation format');\n      }\n\n      const conversations = this.getStoredConversations();\n      conversations[conversation.id] = conversation;\n      \n      return this.saveConversations(conversations);\n    } catch (error) {\n      console.error('Failed to import conversation:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all conversations for a session\n   */\n  clearSession(sessionId: string): boolean {\n    const conversations = this.getStoredConversations();\n    \n    Object.keys(conversations).forEach(id => {\n      if (conversations[id].sessionId === sessionId) {\n        delete conversations[id];\n      }\n    });\n\n    return this.saveConversations(conversations);\n  }\n\n  /**\n   * Get storage stats\n   */\n  getStorageStats(): {\n    totalConversations: number;\n    totalMessages: number;\n    storageSize: number;\n    isStorageAvailable: boolean;\n  } {\n    const conversations = this.getStoredConversations();\n    const totalMessages = Object.values(conversations).reduce(\n      (sum, conv) => sum + conv.messages.length, \n      0\n    );\n\n    let storageSize = 0;\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      storageSize = stored ? new Blob([stored]).size : 0;\n    } catch {\n      storageSize = 0;\n    }\n\n    return {\n      totalConversations: Object.keys(conversations).length,\n      totalMessages,\n      storageSize,\n      isStorageAvailable: this.isStorageAvailable()\n    };\n  }\n}\n\n// Singleton instance\nexport const conversationStorage = new ConversationStorage();","/**\n * Missing exports from @de/frontends-sdk that need local implementation\n * This file provides fallback implementations for functionality not available in the current SDK\n */\n\n// ChatCommandProcessor - Simple mock implementation\nexport class ChatCommandProcessor {\n  constructor(\n    private addBotMessage: (message: string) => void,\n    private executeAction: (action: string, params?: any) => void\n  ) {}\n\n  async initialize(): Promise<void> {\n    // Initialize command processor\n  }\n\n  async processMessage(message: string): Promise<{ success: boolean }> {\n    // Simple command processing\n    if (message.startsWith('/help')) {\n      this.addBotMessage('Available commands: /help, /status, /clear');\n      return { success: true };\n    }\n    \n    if (message.startsWith('/status')) {\n      this.addBotMessage('System status: Online');\n      return { success: true };\n    }\n    \n    if (message.startsWith('/clear')) {\n      this.addBotMessage('Chat cleared');\n      return { success: true };\n    }\n    \n    return { success: false };\n  }\n}\n\n// TMessageType - Message type definitions\nexport type TMessageType = \n  | 'text' \n  | 'file' \n  | 'image' \n  | 'system' \n  | 'typing' \n  | 'user'\n  | 'bot'\n  | 'suggestion'\n  | 'suggestion-outlined'\n  | 'category-cards'\n  | 'user-image'\n  | 'product-suggestions'\n  | 'order-cards';\n\n// IChatConfig - Chat configuration interface\nexport interface IChatConfig {\n  brandName: string;\n  brandColor: string;\n  brandIcon?: string;\n  poweredByText?: string;\n  poweredByIcon?: string;\n  [key: string]: unknown;\n}\n\n// Export functions that might be used by command processor\nexport const convertRelativeToAbsolute = (url: string, baseUrl: string): string => {\n  try {\n    return new URL(url, baseUrl).href;\n  } catch {\n    return url;\n  }\n};\n\nexport const navigateToUrl = (url: string): void => {\n  if (typeof window !== 'undefined') {\n    window.open(url, '_blank');\n  }\n};\n\nexport const executeWebsiteAction = (action: string, params?: any): void => {\n  console.log('Website action:', action, params);\n  // In a real implementation, this would interact with the host website\n};\n\n// Website action types\nexport type TWebsiteActionType = \n  | 'CLICK_TEXT'\n  | 'ADD_TO_CART'\n  | 'BUY_NOW'\n  | 'TRY_ON'\n  | 'ADD_TO_WISHLIST'\n  | 'NAVIGATE_BACK'\n  | 'NAVIGATE_FORWARD'\n  | 'REFRESH_PAGE'\n  | 'SCROLL_TO_SECTION';\n\n// Action parameters interface\nexport interface IActionParams {\n  [key: string]: any;\n}\n\n// Chat message interface\nexport interface ISdkChatMessage {\n  id: string;\n  content: string;\n  type: TMessageType;\n  timestamp: Date;\n  sender?: {\n    id: string;\n    name: string;\n    type: 'user' | 'bot' | 'system';\n  };\n}\n\n// Process functions - simplified implementations\nexport const processSlashCommand = (params: {\n  command: string;\n  userMessage: string;\n  getAllLinks: () => any[];\n  clearLinks: () => void;\n  addBotMessage: (message: string) => void;\n  pageData: any;\n  sessionContext: unknown;\n  convertRelativeToAbsolute: (url: string, base: string) => string;\n  navigateToUrl: (url: string) => void;\n}): boolean => {\n  const { command, addBotMessage } = params;\n  \n  switch (command) {\n    case 'help':\n      addBotMessage('Available commands: /help, /status, /links, /clear');\n      return true;\n    case 'status':\n      addBotMessage('System status: Online and ready');\n      return true;\n    case 'links':\n      const links = params.getAllLinks();\n      addBotMessage(`Found ${links.length} links on this page`);\n      return true;\n    case 'clear':\n      params.clearLinks();\n      addBotMessage('Links cleared');\n      return true;\n    default:\n      return false;\n  }\n};\n\nexport const processDataCommand = (message: string, addBotMessage: (msg: string) => void): boolean => {\n  if (message.toLowerCase().includes('data')) {\n    addBotMessage('Data processing functionality coming soon!');\n    return true;\n  }\n  return false;\n};\n\nexport const processNavigation = (params: {\n  userMessage: string;\n  getAllLinks: () => any[];\n  addBotMessage: (message: string) => void;\n  pageData: any;\n  sessionContext: unknown;\n  convertRelativeToAbsolute: (url: string, base: string) => string;\n  navigateToUrl: (url: string) => void;\n}): boolean => {\n  const { userMessage, addBotMessage, navigateToUrl: _navigateToUrl } = params;\n  \n  // Simple navigation detection\n  if (userMessage.toLowerCase().includes('go to') || userMessage.toLowerCase().includes('navigate')) {\n    addBotMessage('Navigation functionality coming soon!');\n    return true;\n  }\n  \n  return false;\n};\n\n// Hook implementations - simplified\nexport const useChatInputManager = () => ({\n  setInputValue: (value: string) => console.log('Set input:', value),\n  setShowConversationStarters: (show: boolean) => console.log('Show starters:', show),\n  setIsLoading: (loading: boolean) => console.log('Set loading:', loading),\n});\n\nexport const useSessionManager = () => ({\n  sessionContext: {},\n  pageData: {},\n});\n\nexport const useLinks = () => ({\n  getAllLinks: () => [],\n  clearLinks: () => {},\n});\n\nexport const useChatStateManager = () => ({\n  content: {\n    welcomeMessage: 'Welcome! How can I help you today?',\n  },\n  behavior: {\n    enableAttachments: true,\n    enableImagePreview: true,\n  },\n});\n\nexport const useMessageHandlers = (setMessages: (updater: (prev: any[]) => any[]) => void) => ({\n  addBotMessage: (content: string, options?: any) => {\n    const message = {\n      id: Date.now().toString(),\n      content,\n      type: 'bot' as TMessageType,\n      timestamp: new Date(),\n      ...options,\n    };\n    setMessages(prev => [...prev, message]);\n  },\n  addUserMessage: (content: string) => {\n    const message = {\n      id: Date.now().toString(),\n      content,\n      type: 'user' as TMessageType,\n      timestamp: new Date(),\n    };\n    setMessages(prev => [...prev, message]);\n  },\n});","/**\n * Session Management System\n * Handles user sessions, authentication, and session persistence\n */\n\nexport interface IUserSession {\n  sessionId: string;\n  userId?: string;\n  userAgent: string;\n  ipAddress?: string;\n  createdAt: string;\n  lastActiveAt: string;\n  isActive: boolean;\n  metadata: {\n    conversationCount: number;\n    messageCount: number;\n    preferences: Record<string, unknown>;\n    tags: string[];\n  };\n}\n\nexport interface ISessionPreferences extends Record<string, unknown> {\n  theme: 'light' | 'dark' | 'auto';\n  language: string;\n  notifications: boolean;\n  autoSave: boolean;\n  compactMode: boolean;\n  showTimestamps: boolean;\n}\n\nclass SessionManager {\n  private readonly SESSION_KEY = 'ashi_widget_session';\n  private readonly SESSION_TIMEOUT = 24 * 60 * 60 * 1000; // 24 hours\n  private currentSession: IUserSession | null = null;\n\n  constructor() {\n    // Only initialize on client-side\n    if (typeof window !== 'undefined') {\n      this.initializeSession();\n      this.setupSessionCleanup();\n    }\n  }\n\n  private generateSessionId(): string {\n    const timestamp = Date.now().toString(36);\n    const randomPart = Math.random().toString(36).substr(2, 9);\n    return `sess_${timestamp}_${randomPart}`;\n  }\n\n  private generateUserId(): string {\n    const timestamp = Date.now().toString(36);\n    const randomPart = Math.random().toString(36).substr(2, 9);\n    return `user_${timestamp}_${randomPart}`;\n  }\n\n  private getUserAgent(): string {\n    return typeof navigator !== 'undefined' ? navigator.userAgent : 'Unknown';\n  }\n\n  private isStorageAvailable(): boolean {\n    try {\n      const testKey = '__session_test__';\n      localStorage.setItem(testKey, 'test');\n      localStorage.removeItem(testKey);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  private getStoredSession(): IUserSession | null {\n    try {\n      if (!this.isStorageAvailable()) return null;\n      \n      const stored = localStorage.getItem(this.SESSION_KEY);\n      if (!stored) return null;\n\n      const session: IUserSession = JSON.parse(stored);\n      \n      // Check if session is expired\n      const lastActive = new Date(session.lastActiveAt).getTime();\n      const now = Date.now();\n      \n      if (now - lastActive > this.SESSION_TIMEOUT) {\n        this.clearStoredSession();\n        return null;\n      }\n\n      return session;\n    } catch (error) {\n      console.error('Failed to load session:', error);\n      return null;\n    }\n  }\n\n  private saveSession(session: IUserSession): boolean {\n    try {\n      if (!this.isStorageAvailable()) return false;\n      \n      localStorage.setItem(this.SESSION_KEY, JSON.stringify(session));\n      return true;\n    } catch (error) {\n      console.error('Failed to save session:', error);\n      return false;\n    }\n  }\n\n  private clearStoredSession(): void {\n    try {\n      if (this.isStorageAvailable()) {\n        localStorage.removeItem(this.SESSION_KEY);\n      }\n    } catch (error) {\n      console.error('Failed to clear session:', error);\n    }\n  }\n\n  private initializeSession(): void {\n    // Try to load existing session\n    const storedSession = this.getStoredSession();\n    \n    if (storedSession) {\n      // Update last active time\n      storedSession.lastActiveAt = new Date().toISOString();\n      storedSession.isActive = true;\n      this.currentSession = storedSession;\n      this.saveSession(storedSession);\n    } else {\n      // Create new session\n      this.createNewSession();\n    }\n  }\n\n  private setupSessionCleanup(): void {\n    // Update session activity every 30 seconds\n    setInterval(() => {\n      if (this.currentSession) {\n        this.updateActivity();\n      }\n    }, 30000);\n\n    // Handle page unload\n    if (typeof window !== 'undefined') {\n      window.addEventListener('beforeunload', () => {\n        if (this.currentSession) {\n          this.currentSession.isActive = false;\n          this.saveSession(this.currentSession);\n        }\n      });\n\n      // Handle visibility change\n      document.addEventListener('visibilitychange', () => {\n        if (this.currentSession) {\n          if (document.hidden) {\n            this.currentSession.isActive = false;\n          } else {\n            this.currentSession.isActive = true;\n            this.updateActivity();\n          }\n          this.saveSession(this.currentSession);\n        }\n      });\n    }\n  }\n\n  /**\n   * Create a new session\n   */\n  createNewSession(userId?: string): IUserSession {\n    const now = new Date().toISOString();\n    \n    const session: IUserSession = {\n      sessionId: this.generateSessionId(),\n      userId: userId || this.generateUserId(),\n      userAgent: this.getUserAgent(),\n      createdAt: now,\n      lastActiveAt: now,\n      isActive: true,\n      metadata: {\n        conversationCount: 0,\n        messageCount: 0,\n        preferences: this.getDefaultPreferences(),\n        tags: []\n      }\n    };\n\n    this.currentSession = session;\n    this.saveSession(session);\n\n    return session;\n  }\n\n  /**\n   * Get current session\n   */\n  getCurrentSession(): IUserSession | null {\n    return this.currentSession;\n  }\n\n  /**\n   * Get session ID\n   */\n  getSessionId(): string | null {\n    return this.currentSession?.sessionId || null;\n  }\n\n  /**\n   * Get user ID\n   */\n  getUserId(): string | null {\n    return this.currentSession?.userId || null;\n  }\n\n  /**\n   * Update session activity\n   */\n  updateActivity(): void {\n    if (this.currentSession) {\n      this.currentSession.lastActiveAt = new Date().toISOString();\n      this.currentSession.isActive = true;\n      this.saveSession(this.currentSession);\n    }\n  }\n\n  /**\n   * Update session metadata\n   */\n  updateMetadata(updates: Partial<IUserSession['metadata']>): boolean {\n    if (!this.currentSession) return false;\n\n    this.currentSession.metadata = {\n      ...this.currentSession.metadata,\n      ...updates\n    };\n\n    this.updateActivity();\n    return this.saveSession(this.currentSession);\n  }\n\n  /**\n   * Increment conversation count\n   */\n  incrementConversationCount(): void {\n    if (this.currentSession) {\n      this.currentSession.metadata.conversationCount++;\n      this.saveSession(this.currentSession);\n    }\n  }\n\n  /**\n   * Increment message count\n   */\n  incrementMessageCount(): void {\n    if (this.currentSession) {\n      this.currentSession.metadata.messageCount++;\n      this.saveSession(this.currentSession);\n    }\n  }\n\n  /**\n   * Get default preferences\n   */\n  private getDefaultPreferences(): ISessionPreferences {\n    return {\n      theme: 'auto',\n      language: 'en',\n      notifications: true,\n      autoSave: true,\n      compactMode: false,\n      showTimestamps: false\n    };\n  }\n\n  /**\n   * Get user preferences\n   */\n  getPreferences(): ISessionPreferences {\n    return (this.currentSession?.metadata.preferences as unknown as ISessionPreferences) || this.getDefaultPreferences();\n  }\n\n  /**\n   * Update user preferences\n   */\n  updatePreferences(preferences: Partial<ISessionPreferences>): boolean {\n    if (!this.currentSession) return false;\n\n    this.currentSession.metadata.preferences = {\n      ...this.getPreferences(),\n      ...preferences\n    };\n\n    this.updateActivity();\n    return this.saveSession(this.currentSession);\n  }\n\n  /**\n   * Add session tags\n   */\n  addTag(tag: string): boolean {\n    if (!this.currentSession) return false;\n\n    if (!this.currentSession.metadata.tags.includes(tag)) {\n      this.currentSession.metadata.tags.push(tag);\n      this.saveSession(this.currentSession);\n    }\n\n    return true;\n  }\n\n  /**\n   * Remove session tag\n   */\n  removeTag(tag: string): boolean {\n    if (!this.currentSession) return false;\n\n    const index = this.currentSession.metadata.tags.indexOf(tag);\n    if (index > -1) {\n      this.currentSession.metadata.tags.splice(index, 1);\n      this.saveSession(this.currentSession);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * End current session\n   */\n  endSession(): void {\n    if (this.currentSession) {\n      this.currentSession.isActive = false;\n      this.saveSession(this.currentSession);\n      this.currentSession = null;\n    }\n  }\n\n  /**\n   * Clear all session data\n   */\n  clearSession(): void {\n    this.currentSession = null;\n    this.clearStoredSession();\n  }\n\n  /**\n   * Get session duration in milliseconds\n   */\n  getSessionDuration(): number {\n    if (!this.currentSession) return 0;\n\n    const created = new Date(this.currentSession.createdAt).getTime();\n    const lastActive = new Date(this.currentSession.lastActiveAt).getTime();\n    \n    return lastActive - created;\n  }\n\n  /**\n   * Check if session is active\n   */\n  isSessionActive(): boolean {\n    if (!this.currentSession) return false;\n\n    const lastActive = new Date(this.currentSession.lastActiveAt).getTime();\n    const now = Date.now();\n    \n    return now - lastActive < this.SESSION_TIMEOUT;\n  }\n\n  /**\n   * Refresh session (extend timeout)\n   */\n  refreshSession(): boolean {\n    if (!this.currentSession) return false;\n\n    this.updateActivity();\n    return true;\n  }\n\n  /**\n   * Export session data\n   */\n  exportSession(): string | null {\n    if (!this.currentSession) return null;\n    \n    return JSON.stringify(this.currentSession, null, 2);\n  }\n\n  /**\n   * Get session statistics\n   */\n  getSessionStats(): {\n    sessionId: string | null;\n    userId: string | null;\n    duration: number;\n    conversationCount: number;\n    messageCount: number;\n    isActive: boolean;\n    createdAt: string | null;\n    lastActiveAt: string | null;\n  } {\n    if (!this.currentSession) {\n      return {\n        sessionId: null,\n        userId: null,\n        duration: 0,\n        conversationCount: 0,\n        messageCount: 0,\n        isActive: false,\n        createdAt: null,\n        lastActiveAt: null\n      };\n    }\n\n    return {\n      sessionId: this.currentSession.sessionId,\n      userId: this.currentSession.userId || null,\n      duration: this.getSessionDuration(),\n      conversationCount: this.currentSession.metadata.conversationCount,\n      messageCount: this.currentSession.metadata.messageCount,\n      isActive: this.currentSession.isActive,\n      createdAt: this.currentSession.createdAt,\n      lastActiveAt: this.currentSession.lastActiveAt\n    };\n  }\n}\n\n// Singleton instance\nexport const sessionManager = new SessionManager();","/**\n * Session HTML Storage Utility\n * \n * @description\n * Client-side utility for accessing HTML data stored in browser sessionStorage.\n * Replaces the previous server-side file-based storage system.\n * \n * @features\n * - Access latest HTML data from any trigger type\n * - Retrieve specific trigger data (initial-load, final-load, agent-request)\n * - List all available HTML data entries\n * - Type-safe data access with error handling\n * - Storage cleanup and management utilities\n */\n\nexport interface IHtmlMetadata {\n  title: string;\n  description: string;\n  url: string;\n  extractedAt: string;\n}\n\nexport interface IHtmlContent {\n  headings: string[];\n  paragraphs: string[];\n  text: string;\n}\n\nexport interface IHtmlLinks {\n  internal: string[];\n  external: string[];\n}\n\nexport interface IHtmlMedia {\n  images: string[];\n  videos: string[];\n}\n\nexport interface IProcessedHtmlDataStorage {\n  id: string;\n  sessionId: string;\n  tags: string[];\n  timestamp: number;\n  captureContext: string;\n  trigger: string;\n  metadata: IHtmlMetadata;\n  content: IHtmlContent;\n  links: IHtmlLinks;\n  media: IHtmlMedia;\n}\n\nexport class SessionHtmlStorage {\n  private static readonly STORAGE_PREFIX = 'ashi_html_data_';\n  private static readonly LATEST_KEY = 'ashi_latest_html_data';\n\n  /**\n   * Get the latest HTML data from any trigger type\n   */\n  static getLatestHtmlData(): IProcessedHtmlDataStorage | null {\n    try {\n      const latestKey = sessionStorage.getItem(this.LATEST_KEY);\n      if (!latestKey) {\n        console.warn('⚠️ [SessionHtmlStorage] No latest HTML data reference found');\n        return null;\n      }\n\n      const dataStr = sessionStorage.getItem(latestKey);\n      if (!dataStr) {\n        console.warn(`⚠️ [SessionHtmlStorage] No data found for key: ${latestKey}`);\n        return null;\n      }\n\n      const data = JSON.parse(dataStr) as IProcessedHtmlDataStorage;\n      console.log(`📖 [SessionHtmlStorage] Retrieved latest HTML data: ${data.trigger} from ${data.metadata.url}`);\n      return data;\n    } catch (error) {\n      console.error('❌ [SessionHtmlStorage] Failed to get latest HTML data:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get HTML data for a specific trigger type\n   */\n  static getHtmlDataByTrigger(trigger: string): IProcessedHtmlDataStorage | null {\n    try {\n      const key = `${this.STORAGE_PREFIX}${trigger}`;\n      const dataStr = sessionStorage.getItem(key);\n      \n      if (!dataStr) {\n        console.warn(`⚠️ [SessionHtmlStorage] No data found for trigger: ${trigger}`);\n        return null;\n      }\n\n      const data = JSON.parse(dataStr) as IProcessedHtmlDataStorage;\n      console.log(`📖 [SessionHtmlStorage] Retrieved HTML data for trigger: ${trigger} from ${data.metadata.url}`);\n      return data;\n    } catch (error) {\n      console.error(`❌ [SessionHtmlStorage] Failed to get HTML data for trigger ${trigger}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Get all available HTML data entries\n   */\n  static getAllHtmlData(): { trigger: string; data: IProcessedHtmlDataStorage }[] {\n    try {\n      const entries: { trigger: string; data: IProcessedHtmlDataStorage }[] = [];\n      \n      for (let i = 0; i < sessionStorage.length; i++) {\n        const key = sessionStorage.key(i);\n        if (key && key.startsWith(this.STORAGE_PREFIX) && key !== this.LATEST_KEY) {\n          const dataStr = sessionStorage.getItem(key);\n          if (dataStr) {\n            try {\n              const data = JSON.parse(dataStr) as IProcessedHtmlDataStorage;\n              const trigger = key.replace(this.STORAGE_PREFIX, '');\n              entries.push({ trigger, data });\n            } catch (parseError) {\n              console.warn(`⚠️ [SessionHtmlStorage] Failed to parse data for key: ${key}`, parseError);\n            }\n          }\n        }\n      }\n\n      console.log(`📊 [SessionHtmlStorage] Retrieved ${entries.length} HTML data entries`);\n      return entries;\n    } catch (error) {\n      console.error('❌ [SessionHtmlStorage] Failed to get all HTML data:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Check if HTML data exists for a specific trigger\n   */\n  static hasHtmlData(trigger: string): boolean {\n    const key = `${this.STORAGE_PREFIX}${trigger}`;\n    return sessionStorage.getItem(key) !== null;\n  }\n\n  /**\n   * Get available trigger types\n   */\n  static getAvailableTriggers(): string[] {\n    const triggers: string[] = [];\n    \n    for (let i = 0; i < sessionStorage.length; i++) {\n      const key = sessionStorage.key(i);\n      if (key && key.startsWith(this.STORAGE_PREFIX) && key !== this.LATEST_KEY) {\n        const trigger = key.replace(this.STORAGE_PREFIX, '');\n        triggers.push(trigger);\n      }\n    }\n\n    return triggers;\n  }\n\n  /**\n   * Clean up old HTML data entries (useful for memory management)\n   */\n  static cleanup(): void {\n    try {\n      const keysToRemove: string[] = [];\n      \n      for (let i = 0; i < sessionStorage.length; i++) {\n        const key = sessionStorage.key(i);\n        if (key && key.startsWith(this.STORAGE_PREFIX)) {\n          keysToRemove.push(key);\n        }\n      }\n\n      keysToRemove.forEach(key => {\n        sessionStorage.removeItem(key);\n      });\n\n      // Also remove the latest reference\n      sessionStorage.removeItem(this.LATEST_KEY);\n\n      console.log(`🧹 [SessionHtmlStorage] Cleaned up ${keysToRemove.length} HTML data entries`);\n    } catch (error) {\n      console.error('❌ [SessionHtmlStorage] Failed to cleanup HTML data:', error);\n    }\n  }\n\n  /**\n   * Get storage statistics\n   */\n  static getStorageStats(): {\n    totalEntries: number;\n    availableTriggers: string[];\n    totalStorageSize: number;\n    latestTrigger: string | null;\n  } {\n    const triggers = this.getAvailableTriggers();\n    let totalSize = 0;\n\n    triggers.forEach(trigger => {\n      const key = `${this.STORAGE_PREFIX}${trigger}`;\n      const data = sessionStorage.getItem(key);\n      if (data) {\n        totalSize += data.length;\n      }\n    });\n\n    const latestKey = sessionStorage.getItem(this.LATEST_KEY);\n    const latestTrigger = latestKey ? latestKey.replace(this.STORAGE_PREFIX, '') : null;\n\n    return {\n      totalEntries: triggers.length,\n      availableTriggers: triggers,\n      totalStorageSize: totalSize,\n      latestTrigger\n    };\n  }\n}\n\n// Convenience functions for easy access\nexport const getLatestHtmlData = () => SessionHtmlStorage.getLatestHtmlData();\nexport const getHtmlDataByTrigger = (trigger: string) => SessionHtmlStorage.getHtmlDataByTrigger(trigger);\nexport const getAllHtmlData = () => SessionHtmlStorage.getAllHtmlData();\nexport const hasHtmlData = (trigger: string) => SessionHtmlStorage.hasHtmlData(trigger);\nexport const getAvailableTriggers = () => SessionHtmlStorage.getAvailableTriggers();\nexport const cleanupHtmlData = () => SessionHtmlStorage.cleanup();\nexport const getHtmlStorageStats = () => SessionHtmlStorage.getStorageStats();","/**\n * API Functions - Core functionality for authentication, sessions, and chat\n * Moved from @de/types to avoid circular dependencies in production\n */\n\n// Placeholder implementations - these should be replaced with actual API calls\nexport const getCurrentAuthData = (): any | null => {\n  if (typeof window === 'undefined') return null;\n  \n  try {\n    const currentJewelerid = localStorage.getItem('current_auth_jewelerid');\n    if (currentJewelerid) {\n      // Return basic auth data structure\n      return {\n        jewelerid: currentJewelerid,\n        timestamp: new Date().toISOString()\n      };\n    }\n    return null;\n  } catch (error) {\n    console.error('Error retrieving current auth data:', error);\n    return null;\n  }\n};\n\nexport const sendSimpleChatMessage = async (\n  message: string,\n  sessionId?: string,\n  apiBaseURL?: string\n): Promise<any> => {\n  console.log('sendSimpleChatMessage called:', { message, sessionId, apiBaseURL });\n  // Placeholder implementation\n  return {\n    success: true,\n    data: {\n      response: 'This is a placeholder response',\n      messageId: Date.now().toString()\n    }\n  };\n};\n\nexport const completeAuthenticationFlowWithDetails = async (\n  userDetails: any,\n  apiBaseURL?: string\n): Promise<any> => {\n  console.log('completeAuthenticationFlowWithDetails called:', { userDetails, apiBaseURL });\n  // Placeholder implementation\n  return {\n    success: true,\n    data: {\n      user: userDetails,\n      sessionId: Date.now().toString()\n    }\n  };\n};\n\nexport const clearAuthenticationData = (jewelerid?: string): boolean => {\n  if (typeof window === 'undefined') return false;\n  \n  try {\n    if (jewelerid) {\n      localStorage.removeItem(`auth_data_${jewelerid}`);\n    } else {\n      localStorage.removeItem('current_auth_jewelerid');\n    }\n    return true;\n  } catch (error) {\n    console.error('Error clearing auth data:', error);\n    return false;\n  }\n};\n\nexport const createInternalUser = async (\n  userData: any,\n  apiBaseURL?: string\n): Promise<any> => {\n  console.log('createInternalUser called:', { userData, apiBaseURL });\n  // Placeholder implementation\n  return {\n    success: true,\n    data: {\n      userId: Date.now().toString(),\n      user: userData\n    }\n  };\n};\n\nexport const createSession = async (\n  sessionData: any,\n  authToken?: string,\n  apiBaseURL?: string\n): Promise<any> => {\n  console.log('createSession called:', { sessionData, authToken, apiBaseURL });\n  // Placeholder implementation\n  return {\n    success: true,\n    data: {\n      sessionId: Date.now().toString(),\n      session: sessionData\n    }\n  };\n};"],"mappings":"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","names":["data"]}