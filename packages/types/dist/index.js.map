{"version":3,"sources":["../src/de-frontend-types/client.ts","../src/de-frontend-types/auth.ts","../src/de-frontend-types/products.ts","../src/de-frontend-types/cart.ts","../src/de-frontend-types/quotations.ts","../src/de-frontend-types/wishlist.ts","../src/de-frontend-types/special-orders.ts","../src/de-frontend-types/customquote.ts","../src/de-frontend-types/order-status.ts","../src/de-frontend-types/catalog-program.ts","../src/de-frontend-types/email.ts","../src/de-frontend-types/internal-user.ts","../src/de-frontend-types/session.ts","../src/de-frontend-types/freshchat.ts","../src/de-frontend-types/chat.ts","../src/de-frontend-types/auth-flow.ts","../src/de-frontend-types/index.ts"],"names":["axios","item"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * API Client for AshiD Diamonds Integration\n * Handles HTTP requests, authentication, and error handling\n */\n\nimport axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { IApiResponse, IApiError, IApiConfig, IAuthState } from './types';\n\nclass ApiClient {\n  private axiosInstance: AxiosInstance;\n  private config: IApiConfig;\n  private authState: IAuthState = {\n    isAuthenticated: false,\n    token: null,\n    refreshToken: null,\n    expiresAt: null,\n    userInfo: null,\n  };\n\n  constructor(config: Partial<IApiConfig> = {}) {\n    this.config = {\n      baseURL: process.env.NEXT_PUBLIC_ASHID_API_URL || 'https://aichatbotbeta.ashidiamonds.com',\n      timeout: 30000,\n      retries: 3,\n      retryDelay: 1000,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n      ...config,\n    };\n\n    this.axiosInstance = axios.create({\n      baseURL: this.config.baseURL,\n      timeout: this.config.timeout,\n      headers: this.config.headers,\n    });\n\n    this.setupInterceptors();\n    this.loadAuthFromStorage();\n  }\n\n  private setupInterceptors(): void {\n    // Request interceptor - Add auth token\n    this.axiosInstance.interceptors.request.use(\n      (config) => {\n        if (this.authState.token) {\n          config.headers.Authorization = `Bearer ${this.authState.token}`;\n        }\n        \n        // Add request timestamp for debugging\n        config.headers['X-Request-Time'] = new Date().toISOString();\n        \n        return config;\n      },\n      (error) => {\n        return Promise.reject(this.formatError(error));\n      }\n    );\n\n    // Response interceptor - Handle responses and errors\n    this.axiosInstance.interceptors.response.use(\n      (response) => {\n        // Check if response follows AshiD API format\n        if (response.data && typeof response.data === 'object') {\n          const { responseCode, responseStatus, responseMessage, responseData } = response.data;\n          \n          if (responseCode !== undefined) {\n            // Transform AshiD API response to standard format\n            return {\n              ...response,\n              data: {\n                success: responseCode === 200 || responseCode === 1,\n                data: responseData,\n                message: responseMessage,\n                status: responseStatus,\n                originalResponse: response.data,\n              } as IApiResponse,\n            };\n          }\n        }\n        \n        return response;\n      },\n      async (error) => {\n        const originalRequest = error.config;\n\n        // Handle 401 Unauthorized - Token expired\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true;\n\n          try {\n            await this.refreshToken();\n            originalRequest.headers.Authorization = `Bearer ${this.authState.token}`;\n            return this.axiosInstance(originalRequest);\n          } catch (refreshError) {\n            this.clearAuth();\n            // Dispatch auth expired event\n            if (typeof window !== 'undefined') {\n              window.dispatchEvent(new CustomEvent('auth:expired'));\n            }\n            return Promise.reject(this.formatError(refreshError));\n          }\n        }\n\n        return Promise.reject(this.formatError(error));\n      }\n    );\n  }\n\n  private formatError(error: any): IApiError {\n    const now = new Date().toISOString();\n\n    if (error.response) {\n      // Server responded with error status\n      const { data, status, statusText } = error.response;\n      \n      // Handle AshiD API error format\n      if (data && data.responseMessage) {\n        return {\n          code: `HTTP_${status}`,\n          message: data.responseMessage,\n          details: {\n            status,\n            statusText,\n            responseCode: data.responseCode,\n            responseStatus: data.responseStatus,\n            originalData: data,\n          },\n          timestamp: now,\n        };\n      }\n\n      return {\n        code: `HTTP_${status}`,\n        message: data?.message || statusText || 'Request failed',\n        details: { status, statusText, data },\n        timestamp: now,\n      };\n    }\n\n    if (error.request) {\n      return {\n        code: 'NETWORK_ERROR',\n        message: 'Network error - Unable to reach server',\n        details: { request: error.request },\n        timestamp: now,\n      };\n    }\n\n    return {\n      code: 'UNKNOWN_ERROR',\n      message: error.message || 'Unknown error occurred',\n      details: error,\n      timestamp: now,\n    };\n  }\n\n  private loadAuthFromStorage(): void {\n    if (typeof window === 'undefined') return;\n\n    try {\n      const stored = localStorage.getItem('ashid_auth');\n      if (stored) {\n        const authData = JSON.parse(stored);\n        \n        if (authData.expiresAt && new Date(authData.expiresAt) > new Date()) {\n          this.authState = authData;\n        } else {\n          this.clearAuth();\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load auth from storage:', error);\n      this.clearAuth();\n    }\n  }\n\n  private saveAuthToStorage(): void {\n    if (typeof window === 'undefined') return;\n\n    try {\n      localStorage.setItem('ashid_auth', JSON.stringify(this.authState));\n    } catch (error) {\n      console.error('Failed to save auth to storage:', error);\n    }\n  }\n\n  private async refreshToken(): Promise<void> {\n    if (!this.authState.refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    // Note: Implement refresh token logic based on AshiD API\n    // For now, clear auth as refresh endpoint is not defined in swagger\n    this.clearAuth();\n    throw new Error('Token refresh not implemented');\n  }\n\n  // Public authentication methods\n  public setAuth(token: string, refreshToken?: string, expiresIn?: number, userInfo?: any): void {\n    const expiresAt = expiresIn \n      ? new Date(Date.now() + expiresIn * 1000)\n      : new Date(Date.now() + 24 * 60 * 60 * 1000); // Default 24 hours\n\n    this.authState = {\n      isAuthenticated: true,\n      token,\n      refreshToken: refreshToken || null,\n      expiresAt,\n      userInfo: userInfo || null,\n    };\n\n    this.saveAuthToStorage();\n  }\n\n  public clearAuth(): void {\n    this.authState = {\n      isAuthenticated: false,\n      token: null,\n      refreshToken: null,\n      expiresAt: null,\n      userInfo: null,\n    };\n\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem('ashid_auth');\n    }\n  }\n\n  public getAuth(): IAuthState {\n    return { ...this.authState };\n  }\n\n  public isAuthenticated(): boolean {\n    return this.authState.isAuthenticated && \n           this.authState.token !== null &&\n           (this.authState.expiresAt === null || this.authState.expiresAt > new Date());\n  }\n\n  // HTTP Methods\n  public async get<T = any>(\n    url: string, \n    config?: AxiosRequestConfig\n  ): Promise<IApiResponse<T>> {\n    const response: AxiosResponse<IApiResponse<T>> = await this.axiosInstance.get(url, config);\n    return response.data;\n  }\n\n  public async post<T = any>(\n    url: string, \n    data?: any, \n    config?: AxiosRequestConfig\n  ): Promise<IApiResponse<T>> {\n    const response: AxiosResponse<IApiResponse<T>> = await this.axiosInstance.post(url, data, config);\n    return response.data;\n  }\n\n  public async put<T = any>(\n    url: string, \n    data?: any, \n    config?: AxiosRequestConfig\n  ): Promise<IApiResponse<T>> {\n    const response: AxiosResponse<IApiResponse<T>> = await this.axiosInstance.put(url, data, config);\n    return response.data;\n  }\n\n  public async delete<T = any>(\n    url: string, \n    config?: AxiosRequestConfig\n  ): Promise<IApiResponse<T>> {\n    const response: AxiosResponse<IApiResponse<T>> = await this.axiosInstance.delete(url, config);\n    return response.data;\n  }\n\n  // Utility methods\n  public async healthCheck(): Promise<boolean> {\n    try {\n      // Use the health check function directly instead of API call\n      const { quickHealthCheck } = await import('../../utils/health-checker');\n      const healthStatus = await quickHealthCheck('ashi-widget-client');\n      return healthStatus?.status === 'healthy';\n    } catch (error) {\n      console.warn('❌ [ApiClient] Health check failed:', error);\n      return false;\n    }\n  }\n\n  public getBaseURL(): string {\n    return this.config.baseURL;\n  }\n\n  public updateConfig(newConfig: Partial<IApiConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    \n    // Update axios instance\n    this.axiosInstance.defaults.baseURL = this.config.baseURL;\n    this.axiosInstance.defaults.timeout = this.config.timeout;\n    this.axiosInstance.defaults.headers = { ...this.axiosInstance.defaults.headers, ...this.config.headers };\n  }\n}\n\n// Export singleton instance\nexport const apiClient = new ApiClient();\nexport default ApiClient;","/**\n * Authentication API for AshiD Diamonds\n * Handles login, logout, and token management\n */\n\nimport { apiClient } from './client';\nimport { ILoginRequest, ILoginResponse, IApiResponse } from './types';\n\nexport class AuthAPI {\n  /**\n   * Login user with credentials\n   */\n  async login(credentials: ILoginRequest): Promise<IApiResponse<ILoginResponse>> {\n    try {\n      const response = await apiClient.post<ILoginResponse>('/api/authentication/login', credentials);\n      \n      if (response.success && response.data) {\n        // Store authentication data in client\n        apiClient.setAuth(\n          response.data.token,\n          response.data.refreshToken,\n          response.data.expiresIn,\n          response.data.userInfo\n        );\n      }\n      \n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Logout current user\n   */\n  async logout(): Promise<void> {\n    try {\n      // Clear authentication data\n      apiClient.clearAuth();\n      \n      // Note: Add logout API call if endpoint exists\n      // await apiClient.post('/api/authentication/logout');\n      \n      // Dispatch logout event\n      if (typeof window !== 'undefined') {\n        window.dispatchEvent(new CustomEvent('auth:logout'));\n      }\n    } catch (error) {\n      // Still clear auth even if API call fails\n      apiClient.clearAuth();\n      throw error;\n    }\n  }\n\n  /**\n   * Get current authentication state\n   */\n  getAuthState() {\n    return apiClient.getAuth();\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated(): boolean {\n    return apiClient.isAuthenticated();\n  }\n\n  /**\n   * Get current user info\n   */\n  getCurrentUser() {\n    const auth = apiClient.getAuth();\n    return auth.userInfo;\n  }\n\n  /**\n   * Check if token is expired or about to expire\n   */\n  isTokenExpired(): boolean {\n    const auth = apiClient.getAuth();\n    if (!auth.expiresAt) return false;\n    \n    // Consider token expired if it expires in the next 5 minutes\n    const expirationBuffer = 5 * 60 * 1000; // 5 minutes in milliseconds\n    return new Date(auth.expiresAt).getTime() - Date.now() < expirationBuffer;\n  }\n\n  /**\n   * Refresh authentication token\n   */\n  async refreshToken(): Promise<void> {\n    // Note: Implement when refresh token endpoint is available\n    throw new Error('Token refresh not implemented - endpoint not available in API');\n  }\n\n  /**\n   * Listen to authentication events\n   */\n  onAuthChange(callback: (isAuthenticated: boolean) => void): () => void {\n    if (typeof window === 'undefined') {\n      return () => {}; // No-op for SSR\n    }\n\n    const handleAuthExpired = () => callback(false);\n    const handleAuthLogout = () => callback(false);\n    \n    window.addEventListener('auth:expired', handleAuthExpired);\n    window.addEventListener('auth:logout', handleAuthLogout);\n    \n    return () => {\n      window.removeEventListener('auth:expired', handleAuthExpired);\n      window.removeEventListener('auth:logout', handleAuthLogout);\n    };\n  }\n}\n\n// Export singleton instance\nexport const authAPI = new AuthAPI();","/**\n * Products API for AshiD Diamonds\n * Handles product search, details, variants, and specifications\n */\n\nimport { apiClient } from './client';\nimport {\n  IProduct,\n  IProductDetails,\n  IProductVariant,\n  IProductSearchParams,\n  IProductSearchResponse,\n  IApiResponse,\n  IPaginationParams,\n  IRelatedProduct,\n  IProductMeasurement,\n  IStyleHistory,\n  IInventoryStatusRequest,\n  IInventoryStatus,\n  ISimilarStyle,\n  IRecentlyViewed,\n} from './types';\n\nexport class ProductsAPI {\n  /**\n   * Search for products\n   */\n  async searchProducts(params: IProductSearchParams = {}): Promise<IApiResponse<IProductSearchResponse>> {\n    try {\n      const queryParams = new URLSearchParams();\n      \n      if (params.query) queryParams.append('query', params.query);\n      if (params.category) queryParams.append('category', params.category);\n      if (params.minPrice) queryParams.append('minPrice', params.minPrice.toString());\n      if (params.maxPrice) queryParams.append('maxPrice', params.maxPrice.toString());\n      if (params.page) queryParams.append('page', params.page.toString());\n      if (params.limit) queryParams.append('limit', params.limit.toString());\n      if (params.sortBy) queryParams.append('sortBy', params.sortBy);\n      if (params.sortOrder) queryParams.append('sortOrder', params.sortOrder);\n\n      const url = `/api/products/search${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\n      return await apiClient.get<IProductSearchResponse>(url);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get product details by style ID\n   */\n  async getProductDetails(styleId: string): Promise<IApiResponse<IProductDetails>> {\n    try {\n      return await apiClient.get<IProductDetails>(`/api/products/${styleId}/details`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get product variants by style ID\n   */\n  async getProductVariants(styleId: string): Promise<IApiResponse<IProductVariant[]>> {\n    try {\n      return await apiClient.get<IProductVariant[]>(`/api/products/${styleId}/variants`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get product specifications by style ID\n   */\n  async getProductSpecifications(styleId: string): Promise<IApiResponse<Record<string, any>>> {\n    try {\n      return await apiClient.get<Record<string, any>>(`/api/products/${styleId}/specifications`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get multiple products by style IDs\n   */\n  async getProductsByIds(styleIds: string[]): Promise<IApiResponse<IProduct[]>> {\n    try {\n      const promises = styleIds.map(id => this.getProductDetails(id));\n      const responses = await Promise.allSettled(promises);\n      \n      const products: IProduct[] = [];\n      responses.forEach((response) => {\n        if (response.status === 'fulfilled' && response.value.success) {\n          products.push(response.value.data);\n        }\n      });\n\n      return {\n        success: true,\n        data: products,\n        message: `Retrieved ${products.length} of ${styleIds.length} products`,\n        status: 'success',\n        originalResponse: responses,\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get featured or trending products\n   */\n  async getFeaturedProducts(limit: number = 10): Promise<IApiResponse<IProduct[]>> {\n    try {\n      // Use search with specific parameters for featured products\n      return await this.searchProducts({ \n        limit, \n        sortBy: 'featured',\n        sortOrder: 'desc' \n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get products by category\n   */\n  async getProductsByCategory(\n    category: string, \n    params: IPaginationParams = {}\n  ): Promise<IApiResponse<IProductSearchResponse>> {\n    try {\n      return await this.searchProducts({\n        category,\n        ...params,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get product recommendations based on a product\n   */\n  async getProductRecommendations(\n    styleId: string, \n    limit: number = 5\n  ): Promise<IApiResponse<IProduct[]>> {\n    try {\n      // Get product details first to understand category/type\n      const productResponse = await this.getProductDetails(styleId);\n      \n      if (!productResponse.success) {\n        throw new Error('Failed to get product details for recommendations');\n      }\n\n      const product = productResponse.data;\n      \n      // Search for similar products in the same category\n      const recommendationsResponse = await this.searchProducts({\n        category: product.category,\n        limit: limit + 1, // Get one extra to exclude the original product\n      });\n\n      if (recommendationsResponse.success) {\n        // Filter out the original product and limit results\n        const recommendations = recommendationsResponse.data.products\n          .filter(p => p.style_id !== styleId)\n          .slice(0, limit);\n\n        return {\n          success: true,\n          data: recommendations,\n          message: `Found ${recommendations.length} recommendations`,\n          status: 'success',\n          originalResponse: recommendationsResponse,\n        };\n      }\n\n      return recommendationsResponse;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Check product availability\n   */\n  async checkAvailability(styleId: string, variantId?: string): Promise<IApiResponse<boolean>> {\n    try {\n      if (variantId) {\n        // Check specific variant availability\n        const variantsResponse = await this.getProductVariants(styleId);\n        if (variantsResponse.success) {\n          const variant = variantsResponse.data.find(v => v.variantId === variantId);\n          return {\n            success: true,\n            data: variant?.availability || false,\n            message: variant ? 'Variant availability checked' : 'Variant not found',\n            status: 'success',\n            originalResponse: variantsResponse,\n          };\n        }\n        return variantsResponse;\n      } else {\n        // Check general product availability\n        const productResponse = await this.getProductDetails(styleId);\n        if (productResponse.success) {\n          return {\n            success: true,\n            data: productResponse.data.availability || false,\n            message: 'Product availability checked',\n            status: 'success',\n            originalResponse: productResponse,\n          };\n        }\n        return productResponse;\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get product images\n   */\n  async getProductImages(styleId: string): Promise<IApiResponse<string[]>> {\n    try {\n      const productResponse = await this.getProductDetails(styleId);\n      \n      if (productResponse.success) {\n        const images = productResponse.data.images || [];\n        if (productResponse.data.imageUrl && !images.includes(productResponse.data.imageUrl)) {\n          images.unshift(productResponse.data.imageUrl);\n        }\n\n        return {\n          success: true,\n          data: images,\n          message: `Retrieved ${images.length} images`,\n          status: 'success',\n          originalResponse: productResponse,\n        };\n      }\n\n      return productResponse;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // ===== MISSING APIS FROM SWAGGER =====\n\n  /**\n   * Get related products that share connection with another product\n   */\n  async getRelatedProducts(styleId: string): Promise<IApiResponse<IRelatedProduct[]>> {\n    try {\n      return await apiClient.get<IRelatedProduct[]>(`/api/products/${styleId}/related`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get product measurements based on various criteria & jewelry type\n   */\n  async getProductMeasurement(styleId: string): Promise<IApiResponse<IProductMeasurement>> {\n    try {\n      return await apiClient.get<IProductMeasurement>(`/api/products/${styleId}/measurement`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get product purchase history by memo & invoice for given style id\n   */\n  async getStyleHistory(styleId: string): Promise<IApiResponse<IStyleHistory>> {\n    try {\n      return await apiClient.get<IStyleHistory>(`/api/products/${styleId}/stylehistory`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get inventory status for given style IDs\n   */\n  async getInventoryStatus(request: IInventoryStatusRequest): Promise<IApiResponse<IInventoryStatus[]>> {\n    try {\n      return await apiClient.post<IInventoryStatus[]>('/api/products/inventory-status', request);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get similar products that share common attributes with given product\n   */\n  async getSimilarStyles(styleId: string): Promise<IApiResponse<ISimilarStyle[]>> {\n    try {\n      return await apiClient.get<ISimilarStyle[]>(`/api/products/${styleId}/similarstyles`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get list of recently viewed products by logged in user\n   */\n  async getRecentlyViewed(): Promise<IApiResponse<IRecentlyViewed[]>> {\n    try {\n      return await apiClient.get<IRecentlyViewed[]>('/api/products/recentlyviewed');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get products details by multiple style IDs (from Swagger)\n   */\n  async getMultipleProductDetails(styleIds: string[]): Promise<IApiResponse<IProduct[]>> {\n    try {\n      return await apiClient.post<IProduct[]>('/api/products/details', { style_ids: styleIds });\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const productsAPI = new ProductsAPI();","/**\n * Cart API for AshiD Diamonds\n * Handles cart operations: add, view, update, remove, and place orders\n */\n\nimport { apiClient } from './client';\nimport {\n  ICart,\n  ICartItem,\n  IAddToCartRequest,\n  IPlaceOrderRequest,\n  IOrder,\n  IApiResponse,\n  IPlaceOrderFields,\n  IPlaceOrderFieldsRequest,\n} from './types';\n\nexport class CartAPI {\n  /**\n   * Get current cart contents\n   */\n  async getCart(): Promise<IApiResponse<ICart>> {\n    try {\n      return await apiClient.get<ICart>('/api/cart');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Add item to cart\n   */\n  async addToCart(item: IAddToCartRequest): Promise<IApiResponse<ICart>> {\n    try {\n      return await apiClient.post<ICart>('/api/cart/add', item);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Update cart item quantity\n   */\n  async updateCartItem(\n    itemId: string, \n    quantity: number\n  ): Promise<IApiResponse<ICart>> {\n    try {\n      return await apiClient.put<ICart>('/api/cart/update', {\n        itemId,\n        quantity,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Remove item from cart\n   */\n  async removeFromCart(itemId: string): Promise<IApiResponse<ICart>> {\n    try {\n      return await apiClient.delete<ICart>(`/api/cart/remove/${itemId}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Clear entire cart\n   */\n  async clearCart(): Promise<IApiResponse<boolean>> {\n    try {\n      return await apiClient.delete<boolean>('/api/cart/clear');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Place order from current cart\n   */\n  async placeOrder(orderData: IPlaceOrderRequest = {}): Promise<IApiResponse<IOrder>> {\n    try {\n      return await apiClient.post<IOrder>('/api/cart/placeorder', orderData);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get cart summary/totals\n   */\n  async getCartSummary(): Promise<IApiResponse<{\n    totalItems: number;\n    subtotal: number;\n    tax: number;\n    shipping: number;\n    totalAmount: number;\n  }>> {\n    try {\n      const cartResponse = await this.getCart();\n      \n      if (cartResponse.success) {\n        const cart = cartResponse.data;\n        const summary = {\n          totalItems: cart.totalItems,\n          subtotal: cart.subtotal,\n          tax: cart.tax || 0,\n          shipping: cart.shipping || 0,\n          totalAmount: cart.totalAmount,\n        };\n\n        return {\n          success: true,\n          data: summary,\n          message: 'Cart summary calculated',\n          status: 'success',\n          originalResponse: cartResponse,\n        };\n      }\n\n      return cartResponse;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Add multiple items to cart\n   */\n  async addMultipleToCart(items: IAddToCartRequest[]): Promise<IApiResponse<ICart>> {\n    try {\n      const promises = items.map(item => this.addToCart(item));\n      const responses = await Promise.allSettled(promises);\n      \n      let lastSuccessfulResponse: IApiResponse<ICart> | null = null;\n      const errors: any[] = [];\n\n      responses.forEach((response, index) => {\n        if (response.status === 'fulfilled' && response.value.success) {\n          lastSuccessfulResponse = response.value;\n        } else {\n          errors.push({\n            index,\n            item: items[index],\n            error: response.status === 'rejected' ? response.reason : response.value,\n          });\n        }\n      });\n\n      if (lastSuccessfulResponse) {\n        return {\n          ...lastSuccessfulResponse,\n          message: `Added ${items.length - errors.length} of ${items.length} items to cart`,\n          originalResponse: { responses, errors },\n        };\n      }\n\n      throw new Error('Failed to add any items to cart');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Validate cart before checkout\n   */\n  async validateCart(): Promise<IApiResponse<{\n    isValid: boolean;\n    issues: string[];\n    suggestions: string[];\n  }>> {\n    try {\n      const cartResponse = await this.getCart();\n      \n      if (!cartResponse.success) {\n        return cartResponse;\n      }\n\n      const cart = cartResponse.data;\n      const issues: string[] = [];\n      const suggestions: string[] = [];\n\n      // Check if cart is empty\n      if (!cart.items || cart.items.length === 0) {\n        issues.push('Cart is empty');\n      }\n\n      // Check for items with zero quantity\n      const zeroQuantityItems = cart.items.filter(item => item.quantity <= 0);\n      if (zeroQuantityItems.length > 0) {\n        issues.push(`${zeroQuantityItems.length} items have zero or negative quantity`);\n      }\n\n      // Check for items with invalid prices\n      const invalidPriceItems = cart.items.filter(item => !item.price || item.price <= 0);\n      if (invalidPriceItems.length > 0) {\n        issues.push(`${invalidPriceItems.length} items have invalid prices`);\n      }\n\n      // Add suggestions\n      if (cart.totalAmount > 10000) {\n        suggestions.push('Consider splitting large orders for better processing');\n      }\n\n      if (cart.items.length > 20) {\n        suggestions.push('Large number of items - consider creating a quotation instead');\n      }\n\n      return {\n        success: true,\n        data: {\n          isValid: issues.length === 0,\n          issues,\n          suggestions,\n        },\n        message: issues.length === 0 ? 'Cart is valid' : `Cart has ${issues.length} issues`,\n        status: 'success',\n        originalResponse: cartResponse,\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Calculate shipping cost\n   */\n  async calculateShipping(shippingAddress?: any): Promise<IApiResponse<{\n    cost: number;\n    method: string;\n    estimatedDays: number;\n  }>> {\n    try {\n      // Note: This would need an actual shipping calculation endpoint\n      // For now, return a mock calculation\n      const cartSummaryResponse = await this.getCartSummary();\n      \n      if (cartSummaryResponse.success) {\n        const { subtotal } = cartSummaryResponse.data;\n        \n        // Mock shipping calculation\n        let shippingCost = 0;\n        let method = 'Standard';\n        let estimatedDays = 5;\n\n        if (subtotal > 500) {\n          shippingCost = 0; // Free shipping\n          method = 'Free Standard Shipping';\n        } else if (subtotal > 100) {\n          shippingCost = 15;\n        } else {\n          shippingCost = 25;\n        }\n\n        return {\n          success: true,\n          data: {\n            cost: shippingCost,\n            method,\n            estimatedDays,\n          },\n          message: 'Shipping calculated',\n          status: 'success',\n          originalResponse: cartSummaryResponse,\n        };\n      }\n\n      return cartSummaryResponse;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // ===== MISSING APIS FROM SWAGGER =====\n\n  /**\n   * Get required fields for placing an order\n   */\n  async getPlaceOrderFields(): Promise<IApiResponse<IPlaceOrderFields>> {\n    try {\n      return await apiClient.get<IPlaceOrderFields>('/api/cart/placeorder/getfields');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Submit place order fields with validation\n   */\n  async postPlaceOrderFields(request: IPlaceOrderFieldsRequest): Promise<IApiResponse<IOrder>> {\n    try {\n      return await apiClient.post<IOrder>('/api/cart/placeorder/postfields', request);\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const cartAPI = new CartAPI();","/**\n * Sales Quotations API for AshiD Diamonds\n * Handles quotation creation, management, and conversion\n */\n\nimport { apiClient } from './client';\nimport {\n  IQuotation,\n  IQuotationItem,\n  ICreateQuotationRequest,\n  IAddQuotationItemRequest,\n  ICart,\n  IApiResponse,\n  IPaginationParams,\n  ISpecificQuotation,\n} from './types';\n\nexport class QuotationsAPI {\n  /**\n   * Create a new sales quotation\n   */\n  async createQuotation(data: ICreateQuotationRequest = {}): Promise<IApiResponse<IQuotation>> {\n    try {\n      return await apiClient.post<IQuotation>('/api/salesquotation/create', data);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get quotation by ID\n   */\n  async getQuotation(quotationId: string): Promise<IApiResponse<IQuotation>> {\n    try {\n      return await apiClient.get<IQuotation>(`/api/salesquotation/${quotationId}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get all quotations for current user\n   */\n  async getQuotations(params: IPaginationParams = {}): Promise<IApiResponse<IQuotation[]>> {\n    try {\n      const queryParams = new URLSearchParams();\n      \n      if (params.page) queryParams.append('page', params.page.toString());\n      if (params.limit) queryParams.append('limit', params.limit.toString());\n      if (params.sortBy) queryParams.append('sortBy', params.sortBy);\n      if (params.sortOrder) queryParams.append('sortOrder', params.sortOrder);\n\n      const url = `/api/salesquotation${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\n      return await apiClient.get<IQuotation[]>(url);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Add item to quotation\n   */\n  async addItemToQuotation(data: IAddQuotationItemRequest): Promise<IApiResponse<IQuotation>> {\n    try {\n      return await apiClient.post<IQuotation>('/api/salesquotation/additem', data);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Remove items from quotation\n   */\n  async removeItemsFromQuotation(\n    quotationId: string, \n    itemIds: string[]\n  ): Promise<IApiResponse<IQuotation>> {\n    try {\n      return await apiClient.delete<IQuotation>('/api/salesquotation/removeitems', {\n        data: {\n          quotationId,\n          itemIds,\n        },\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Remove single item from quotation\n   */\n  async removeItemFromQuotation(\n    quotationId: string, \n    itemId: string\n  ): Promise<IApiResponse<IQuotation>> {\n    try {\n      return await this.removeItemsFromQuotation(quotationId, [itemId]);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Update quotation item quantity\n   */\n  async updateQuotationItem(\n    quotationId: string,\n    itemId: string,\n    quantity: number\n  ): Promise<IApiResponse<IQuotation>> {\n    try {\n      return await apiClient.put<IQuotation>('/api/salesquotation/updateitem', {\n        quotationId,\n        itemId,\n        quantity,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Move quotation to cart\n   */\n  async moveToCart(quotationId: string): Promise<IApiResponse<ICart>> {\n    try {\n      return await apiClient.post<ICart>('/api/salesquotation/movetocart', {\n        quotationId,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Move specific quotation items to cart\n   */\n  async moveItemsToCart(\n    quotationId: string,\n    itemIds: string[]\n  ): Promise<IApiResponse<ICart>> {\n    try {\n      return await apiClient.post<ICart>('/api/salesquotation/moveitemstocart', {\n        quotationId,\n        itemIds,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Update quotation details\n   */\n  async updateQuotation(\n    quotationId: string,\n    data: Partial<ICreateQuotationRequest>\n  ): Promise<IApiResponse<IQuotation>> {\n    try {\n      return await apiClient.put<IQuotation>(`/api/salesquotation/${quotationId}`, data);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Delete quotation\n   */\n  async deleteQuotation(quotationId: string): Promise<IApiResponse<boolean>> {\n    try {\n      return await apiClient.delete<boolean>(`/api/salesquotation/${quotationId}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get quotation summary\n   */\n  async getQuotationSummary(quotationId: string): Promise<IApiResponse<{\n    totalItems: number;\n    totalAmount: number;\n    validUntil: string | null;\n    status: string;\n    itemsCount: Record<string, number>;\n  }>> {\n    try {\n      const quotationResponse = await this.getQuotation(quotationId);\n      \n      if (quotationResponse.success) {\n        const quotation = quotationResponse.data;\n        \n        // Calculate items count by category or type\n        const itemsCount: Record<string, number> = {};\n        quotation.items.forEach(item => {\n          const category = item.product?.category || 'Unknown';\n          itemsCount[category] = (itemsCount[category] || 0) + item.quantity;\n        });\n\n        const summary = {\n          totalItems: quotation.items.reduce((total, item) => total + item.quantity, 0),\n          totalAmount: quotation.totalAmount,\n          validUntil: quotation.validUntil,\n          status: quotation.status,\n          itemsCount,\n        };\n\n        return {\n          success: true,\n          data: summary,\n          message: 'Quotation summary calculated',\n          status: 'success',\n          originalResponse: quotationResponse,\n        };\n      }\n\n      return quotationResponse;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Duplicate quotation\n   */\n  async duplicateQuotation(\n    quotationId: string,\n    newData: Partial<ICreateQuotationRequest> = {}\n  ): Promise<IApiResponse<IQuotation>> {\n    try {\n      const originalResponse = await this.getQuotation(quotationId);\n      \n      if (!originalResponse.success) {\n        return originalResponse;\n      }\n\n      const original = originalResponse.data;\n      \n      // Create new quotation\n      const newQuotationResponse = await this.createQuotation({\n        customerName: original.items.length > 0 ? `Copy of ${original.quotationNumber}` : undefined,\n        ...newData,\n      });\n\n      if (!newQuotationResponse.success) {\n        return newQuotationResponse;\n      }\n\n      const newQuotation = newQuotationResponse.data;\n\n      // Add all items from original quotation\n      const addItemPromises = original.items.map(item =>\n        this.addItemToQuotation({\n          quotationId: newQuotation.quotationId,\n          style_id: item.style_id,\n          quantity: item.quantity,\n        })\n      );\n\n      await Promise.allSettled(addItemPromises);\n\n      // Return updated quotation\n      return await this.getQuotation(newQuotation.quotationId);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Check quotation validity\n   */\n  async checkQuotationValidity(quotationId: string): Promise<IApiResponse<{\n    isValid: boolean;\n    daysRemaining: number;\n    expiresAt: string | null;\n  }>> {\n    try {\n      const quotationResponse = await this.getQuotation(quotationId);\n      \n      if (quotationResponse.success) {\n        const quotation = quotationResponse.data;\n        let isValid = true;\n        let daysRemaining = 0;\n        \n        if (quotation.validUntil) {\n          const expirationDate = new Date(quotation.validUntil);\n          const now = new Date();\n          const diffTime = expirationDate.getTime() - now.getTime();\n          daysRemaining = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n          isValid = daysRemaining > 0;\n        }\n\n        return {\n          success: true,\n          data: {\n            isValid,\n            daysRemaining,\n            expiresAt: quotation.validUntil,\n          },\n          message: isValid ? 'Quotation is valid' : 'Quotation has expired',\n          status: 'success',\n          originalResponse: quotationResponse,\n        };\n      }\n\n      return quotationResponse;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // ===== MISSING APIS FROM SWAGGER =====\n\n  /**\n   * Get specific sales quotation by SQID (from Swagger)\n   */\n  async getSpecificSalesQuotation(sqid: string): Promise<IApiResponse<ISpecificQuotation>> {\n    try {\n      return await apiClient.get<ISpecificQuotation>(`/api/salesquotation/${sqid}/salesquotation`);\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const quotationsAPI = new QuotationsAPI();","/**\n * Wishlist API for AshiD Diamonds\n * Handles wishlist operations: view, add, remove, and move to cart\n */\n\nimport { apiClient } from './client';\nimport {\n  IWishlist,\n  IWishlistItem,\n  IAddToWishlistRequest,\n  ICart,\n  IApiResponse,\n  IPaginationParams,\n} from './types';\n\nexport class WishlistAPI {\n  /**\n   * Get current user's wishlist\n   */\n  async getWishlist(params: IPaginationParams = {}): Promise<IApiResponse<IWishlist>> {\n    try {\n      const queryParams = new URLSearchParams();\n      \n      if (params.page) queryParams.append('page', params.page.toString());\n      if (params.limit) queryParams.append('limit', params.limit.toString());\n      if (params.sortBy) queryParams.append('sortBy', params.sortBy);\n      if (params.sortOrder) queryParams.append('sortOrder', params.sortOrder);\n\n      const url = `/api/wishlist${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\n      return await apiClient.get<IWishlist>(url);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Add item to wishlist\n   */\n  async addToWishlist(item: IAddToWishlistRequest): Promise<IApiResponse<IWishlist>> {\n    try {\n      return await apiClient.post<IWishlist>('/api/wishlist/add', item);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Remove item from wishlist\n   */\n  async removeFromWishlist(itemId: string): Promise<IApiResponse<IWishlist>> {\n    try {\n      return await apiClient.delete<IWishlist>(`/api/wishlist/remove/${itemId}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Remove multiple items from wishlist\n   */\n  async removeMultipleFromWishlist(itemIds: string[]): Promise<IApiResponse<IWishlist>> {\n    try {\n      return await apiClient.delete<IWishlist>('/api/wishlist/remove', {\n        data: { itemIds },\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Clear entire wishlist\n   */\n  async clearWishlist(): Promise<IApiResponse<boolean>> {\n    try {\n      return await apiClient.delete<boolean>('/api/wishlist/clear');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Move wishlist item to cart\n   */\n  async moveToCart(itemId: string, quantity: number = 1): Promise<IApiResponse<ICart>> {\n    try {\n      return await apiClient.post<ICart>('/api/wishlist/movetocart', {\n        itemId,\n        quantity,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Move multiple wishlist items to cart\n   */\n  async moveMultipleToCart(items: Array<{\n    itemId: string;\n    quantity: number;\n  }>): Promise<IApiResponse<ICart>> {\n    try {\n      return await apiClient.post<ICart>('/api/wishlist/movemultipletocart', {\n        items,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Move entire wishlist to cart\n   */\n  async moveAllToCart(defaultQuantity: number = 1): Promise<IApiResponse<ICart>> {\n    try {\n      const wishlistResponse = await this.getWishlist();\n      \n      if (!wishlistResponse.success) {\n        return wishlistResponse;\n      }\n\n      const items = wishlistResponse.data.items.map(item => ({\n        itemId: item.id,\n        quantity: defaultQuantity,\n      }));\n\n      return await this.moveMultipleToCart(items);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Check if product is in wishlist\n   */\n  async isInWishlist(styleId: string): Promise<IApiResponse<boolean>> {\n    try {\n      const wishlistResponse = await this.getWishlist();\n      \n      if (wishlistResponse.success) {\n        const isInWishlist = wishlistResponse.data.items.some(\n          item => item.style_id === styleId\n        );\n\n        return {\n          success: true,\n          data: isInWishlist,\n          message: isInWishlist ? 'Product is in wishlist' : 'Product is not in wishlist',\n          status: 'success',\n          originalResponse: wishlistResponse,\n        };\n      }\n\n      return wishlistResponse;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get wishlist item by style ID\n   */\n  async getWishlistItem(styleId: string): Promise<IApiResponse<IWishlistItem | null>> {\n    try {\n      const wishlistResponse = await this.getWishlist();\n      \n      if (wishlistResponse.success) {\n        const item = wishlistResponse.data.items.find(\n          item => item.style_id === styleId\n        );\n\n        return {\n          success: true,\n          data: item || null,\n          message: item ? 'Wishlist item found' : 'Wishlist item not found',\n          status: 'success',\n          originalResponse: wishlistResponse,\n        };\n      }\n\n      return wishlistResponse;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get wishlist summary\n   */\n  async getWishlistSummary(): Promise<IApiResponse<{\n    totalItems: number;\n    categories: Record<string, number>;\n    priceRange: {\n      min: number;\n      max: number;\n      average: number;\n    } | null;\n    recentlyAdded: IWishlistItem[];\n  }>> {\n    try {\n      const wishlistResponse = await this.getWishlist();\n      \n      if (wishlistResponse.success) {\n        const { items } = wishlistResponse.data;\n        \n        // Calculate categories\n        const categories: Record<string, number> = {};\n        items.forEach(item => {\n          const category = item.product?.category || 'Unknown';\n          categories[category] = (categories[category] || 0) + 1;\n        });\n\n        // Calculate price range\n        let priceRange = null;\n        const prices = items\n          .map(item => item.product?.price)\n          .filter((price): price is number => price !== undefined && price > 0);\n\n        if (prices.length > 0) {\n          priceRange = {\n            min: Math.min(...prices),\n            max: Math.max(...prices),\n            average: prices.reduce((sum, price) => sum + price, 0) / prices.length,\n          };\n        }\n\n        // Get recently added items (last 5)\n        const recentlyAdded = [...items]\n          .sort((a, b) => new Date(b.addedAt).getTime() - new Date(a.addedAt).getTime())\n          .slice(0, 5);\n\n        const summary = {\n          totalItems: items.length,\n          categories,\n          priceRange,\n          recentlyAdded,\n        };\n\n        return {\n          success: true,\n          data: summary,\n          message: 'Wishlist summary calculated',\n          status: 'success',\n          originalResponse: wishlistResponse,\n        };\n      }\n\n      return wishlistResponse;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Update wishlist item notes\n   */\n  async updateWishlistItem(\n    itemId: string, \n    notes: string\n  ): Promise<IApiResponse<IWishlist>> {\n    try {\n      return await apiClient.put<IWishlist>(`/api/wishlist/update/${itemId}`, {\n        notes,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Share wishlist (get shareable link or data)\n   */\n  async shareWishlist(): Promise<IApiResponse<{\n    shareUrl: string;\n    shareData: {\n      totalItems: number;\n      items: Array<{\n        styleId: string;\n        name: string;\n        price?: number;\n        imageUrl?: string;\n      }>;\n    };\n  }>> {\n    try {\n      const wishlistResponse = await this.getWishlist();\n      \n      if (wishlistResponse.success) {\n        const { items } = wishlistResponse.data;\n        \n        const shareData = {\n          totalItems: items.length,\n          items: items.map(item => ({\n            styleId: item.style_id,\n            name: item.product?.name || 'Unknown Product',\n            price: item.product?.price,\n            imageUrl: item.product?.imageUrl,\n          })),\n        };\n\n        // Generate a mock share URL (in real implementation, this would be a server-generated link)\n        const shareUrl = `${window.location.origin}/shared-wishlist/${btoa(JSON.stringify(shareData))}`;\n\n        return {\n          success: true,\n          data: {\n            shareUrl,\n            shareData,\n          },\n          message: 'Wishlist share data generated',\n          status: 'success',\n          originalResponse: wishlistResponse,\n        };\n      }\n\n      return wishlistResponse;\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const wishlistAPI = new WishlistAPI();","/**\n * Special Orders API for AshiD Diamonds\n * Handles special order options and custom product variants\n */\n\nimport { apiClient } from './client';\nimport {\n  ISpecialOrderOptions,\n  ISpecialOrderVariant,\n  IApiResponse,\n} from './types';\n\nexport class SpecialOrdersAPI {\n  /**\n   * Get special order options for a product\n   */\n  async getSpecialOrderOptions(styleId?: string): Promise<IApiResponse<ISpecialOrderOptions>> {\n    try {\n      const queryParams = styleId ? `?styleId=${styleId}` : '';\n      return await apiClient.get<ISpecialOrderOptions>(`/api/specialorder/special_order_options${queryParams}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Check special order variant availability\n   */\n  async checkSpecialOrderVariant(\n    styleId: string,\n    variantOptions: Record<string, any>\n  ): Promise<IApiResponse<ISpecialOrderVariant>> {\n    try {\n      return await apiClient.post<ISpecialOrderVariant>('/api/specialorder/checkspovariant', {\n        styleId,\n        variantOptions,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get available customization options for a product category\n   */\n  async getCustomizationOptions(category: string): Promise<IApiResponse<{\n    metals: string[];\n    gemstones: string[];\n    sizes: string[];\n    engravings: boolean;\n    customDesign: boolean;\n    additionalOptions: Record<string, any>;\n  }>> {\n    try {\n      // This would be a custom endpoint, using special order options for now\n      const optionsResponse = await this.getSpecialOrderOptions();\n      \n      if (optionsResponse.success) {\n        const options = optionsResponse.data;\n        \n        // Parse available options based on category\n        const customizations = {\n          metals: this.extractOptions(options.availableOptions, 'metal') || ['Gold', 'Platinum', 'Silver'],\n          gemstones: this.extractOptions(options.availableOptions, 'gemstone') || ['Diamond', 'Ruby', 'Sapphire', 'Emerald'],\n          sizes: this.extractOptions(options.availableOptions, 'size') || ['5', '6', '7', '8', '9', '10'],\n          engravings: options.customizations?.includes('engraving') || true,\n          customDesign: options.customizations?.includes('custom_design') || true,\n          additionalOptions: options.availableOptions || {},\n        };\n\n        return {\n          success: true,\n          data: customizations,\n          message: 'Customization options retrieved',\n          status: 'success',\n          originalResponse: optionsResponse,\n        };\n      }\n\n      return optionsResponse;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Request special order quote\n   */\n  async requestSpecialOrderQuote(request: {\n    styleId?: string;\n    customizations: Record<string, any>;\n    customerInfo: {\n      name: string;\n      email: string;\n      phone?: string;\n    };\n    description: string;\n    deadline?: string;\n  }): Promise<IApiResponse<{\n    requestId: string;\n    estimatedPrice: number;\n    estimatedLeadTime: string;\n    contactInfo: string;\n  }>> {\n    try {\n      return await apiClient.post<{\n        requestId: string;\n        estimatedPrice: number;\n        estimatedLeadTime: string;\n        contactInfo: string;\n      }>('/api/specialorder/requestquote', request);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get special order request status\n   */\n  async getSpecialOrderStatus(requestId: string): Promise<IApiResponse<{\n    requestId: string;\n    status: 'pending' | 'approved' | 'in_production' | 'completed' | 'cancelled';\n    progress: number;\n    estimatedCompletion: string;\n    updates: Array<{\n      date: string;\n      status: string;\n      notes: string;\n    }>;\n  }>> {\n    try {\n      return await apiClient.get<{\n        requestId: string;\n        status: 'pending' | 'approved' | 'in_production' | 'completed' | 'cancelled';\n        progress: number;\n        estimatedCompletion: string;\n        updates: Array<{\n          date: string;\n          status: string;\n          notes: string;\n        }>;\n      }>(`/api/specialorder/status/${requestId}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get user's special order history\n   */\n  async getSpecialOrderHistory(): Promise<IApiResponse<Array<{\n    requestId: string;\n    styleId?: string;\n    productName: string;\n    customizations: Record<string, any>;\n    status: string;\n    requestDate: string;\n    completionDate?: string;\n    totalCost: number;\n  }>>> {\n    try {\n      return await apiClient.get<Array<{\n        requestId: string;\n        styleId?: string;\n        productName: string;\n        customizations: Record<string, any>;\n        status: string;\n        requestDate: string;\n        completionDate?: string;\n        totalCost: number;\n      }>>('/api/specialorder/history');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Calculate special order pricing\n   */\n  async calculateSpecialOrderPricing(\n    baseStyleId: string,\n    customizations: Record<string, any>\n  ): Promise<IApiResponse<{\n    basePrice: number;\n    customizationCosts: Record<string, number>;\n    totalAdditionalCost: number;\n    finalPrice: number;\n    breakdown: Array<{\n      item: string;\n      cost: number;\n      description: string;\n    }>;\n  }>> {\n    try {\n      const variantResponse = await this.checkSpecialOrderVariant(baseStyleId, customizations);\n      \n      if (variantResponse.success) {\n        const variant = variantResponse.data;\n        \n        // Mock pricing calculation (in real implementation, this would be server-calculated)\n        const basePrice = 1000; // This would come from the base product\n        const additionalCost = variant.additionalCost || 0;\n        \n        const breakdown = [\n          {\n            item: 'Base Product',\n            cost: basePrice,\n            description: 'Starting price for base design',\n          },\n        ];\n\n        if (additionalCost > 0) {\n          breakdown.push({\n            item: 'Customizations',\n            cost: additionalCost,\n            description: 'Additional cost for custom modifications',\n          });\n        }\n\n        const finalPrice = basePrice + additionalCost;\n\n        return {\n          success: true,\n          data: {\n            basePrice,\n            customizationCosts: { customizations: additionalCost },\n            totalAdditionalCost: additionalCost,\n            finalPrice,\n            breakdown,\n          },\n          message: 'Special order pricing calculated',\n          status: 'success',\n          originalResponse: variantResponse,\n        };\n      }\n\n      return variantResponse;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Upload design files for custom order\n   */\n  async uploadDesignFiles(\n    requestId: string,\n    files: File[]\n  ): Promise<IApiResponse<{\n    uploadedFiles: Array<{\n      filename: string;\n      url: string;\n      size: number;\n    }>;\n  }>> {\n    try {\n      const formData = new FormData();\n      formData.append('requestId', requestId);\n      \n      files.forEach((file, index) => {\n        formData.append(`file_${index}`, file);\n      });\n\n      return await apiClient.post<{\n        uploadedFiles: Array<{\n          filename: string;\n          url: string;\n          size: number;\n        }>;\n      }>('/api/specialorder/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // ===== MISSING APIS FROM SWAGGER =====\n\n  /**\n   * Add special order item to cart\n   */\n  async addSpecialOrderToCart(request: {\n    itemcd: string;\n    quantity: number;\n    specifications: Record<string, any>;\n    estimatedPrice?: number;\n    estimatedLeadTime?: string;\n    specialInstructions?: string;\n  }): Promise<IApiResponse<{\n    cartId: string;\n    itemAdded: boolean;\n    estimatedTotal: number;\n  }>> {\n    try {\n      return await apiClient.post('/api/specialorder/cart/add', request);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get special order FAQs and information\n   */\n  async getSpecialOrderInfo(): Promise<IApiResponse<{\n    faq: Array<{\n      question: string;\n      answer: string;\n    }>;\n    process: Array<{\n      step: number;\n      title: string;\n      description: string;\n      duration: string;\n    }>;\n    policies: {\n      cancellation: string;\n      modification: string;\n      warranty: string;\n      returns: string;\n    };\n  }>> {\n    try {\n      // This would typically be a static content endpoint\n      const info = {\n        faq: [\n          {\n            question: 'How long does a special order take?',\n            answer: 'Special orders typically take 4-8 weeks depending on complexity.',\n          },\n          {\n            question: 'Can I modify my order after placing it?',\n            answer: 'Modifications are possible within 48 hours of placing the order.',\n          },\n          {\n            question: 'What customizations are available?',\n            answer: 'We offer metal type, gemstone selection, size adjustments, and custom engravings.',\n          },\n        ],\n        process: [\n          {\n            step: 1,\n            title: 'Consultation',\n            description: 'Discuss your requirements with our design team',\n            duration: '1-2 days',\n          },\n          {\n            step: 2,\n            title: 'Design & Approval',\n            description: 'Review and approve the custom design',\n            duration: '3-5 days',\n          },\n          {\n            step: 3,\n            title: 'Production',\n            description: 'Crafting your custom piece',\n            duration: '3-6 weeks',\n          },\n          {\n            step: 4,\n            title: 'Quality Check',\n            description: 'Final inspection and certification',\n            duration: '1-2 days',\n          },\n          {\n            step: 5,\n            title: 'Delivery',\n            description: 'Secure shipping to your location',\n            duration: '2-3 days',\n          },\n        ],\n        policies: {\n          cancellation: 'Orders can be cancelled within 48 hours. After production begins, cancellation fees may apply.',\n          modification: 'Design modifications are accepted within 48 hours of order confirmation.',\n          warranty: 'All custom pieces come with a 1-year warranty covering manufacturing defects.',\n          returns: 'Custom orders are final sale unless there are manufacturing defects.',\n        },\n      };\n\n      return {\n        success: true,\n        data: info,\n        message: 'Special order information retrieved',\n        status: 'success',\n        originalResponse: null,\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Helper method to extract options from the API response\n  private extractOptions(availableOptions: Record<string, any> | undefined, key: string): string[] | null {\n    if (!availableOptions || !availableOptions[key]) {\n      return null;\n    }\n    \n    const options = availableOptions[key];\n    if (Array.isArray(options)) {\n      return options;\n    }\n    \n    if (typeof options === 'object') {\n      return Object.keys(options);\n    }\n    \n    return null;\n  }\n}\n\n// Export singleton instance\nexport const specialOrdersAPI = new SpecialOrdersAPI();","/**\n * Custom Quote API for AshiD Diamonds\n * Handles custom quote requests, calculations, and management\n */\n\nimport { apiClient } from './client';\nimport {\n  ICustomQuote,\n  ICustomQuoteSpecifications,\n  ICustomerInfo,\n  IApiResponse,\n} from './types';\n\nexport class CustomQuoteAPI {\n  /**\n   * Get available custom quote options and templates\n   */\n  async getCustomQuoteOptions(): Promise<IApiResponse<{\n    metals: string[];\n    gemstones: string[];\n    settings: string[];\n    sizes: string[];\n  }>> {\n    try {\n      return await apiClient.get('/api/customquote/options');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get custom quote templates\n   */\n  async getCustomQuoteTemplates(): Promise<IApiResponse<any[]>> {\n    try {\n      return await apiClient.get('/api/customquote/templates');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new custom quote request\n   */\n  async createCustomQuote(\n    customerInfo: ICustomerInfo,\n    specifications: ICustomQuoteSpecifications,\n    additionalRequirements?: string\n  ): Promise<IApiResponse<ICustomQuote>> {\n    try {\n      const requestData = {\n        customerInfo,\n        specifications,\n        additionalRequirements,\n      };\n      \n      return await apiClient.post<ICustomQuote>('/api/customquote/create', requestData);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Request a custom quote with detailed specifications\n   */\n  async requestCustomQuote(request: {\n    customerName: string;\n    customerEmail: string;\n    customerPhone?: string;\n    productType: string;\n    specifications: Record<string, any>;\n    budget?: number;\n    timeline?: string;\n    notes?: string;\n  }): Promise<IApiResponse<ICustomQuote>> {\n    try {\n      return await apiClient.post<ICustomQuote>('/api/customquote/request', request);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Calculate pricing for a custom quote\n   */\n  async calculateCustomQuote(request: {\n    baseStyleId?: string;\n    specifications: ICustomQuoteSpecifications;\n    quantity?: number;\n  }): Promise<IApiResponse<{\n    estimatedPrice: number;\n    estimatedLeadTime: string;\n    breakdown: Record<string, number>;\n  }>> {\n    try {\n      return await apiClient.post('/api/customquote/calculate', request);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get all custom quotes for the current user\n   */\n  async getCustomQuotes(): Promise<IApiResponse<ICustomQuote[]>> {\n    try {\n      return await apiClient.get<ICustomQuote[]>('/api/customquote');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get a specific custom quote by ID\n   */\n  async getCustomQuoteById(quoteId: string): Promise<IApiResponse<ICustomQuote>> {\n    try {\n      return await apiClient.get<ICustomQuote>(`/api/customquote/${quoteId}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Update a custom quote\n   */\n  async updateCustomQuote(\n    quoteId: string,\n    updates: Partial<ICustomQuote>\n  ): Promise<IApiResponse<ICustomQuote>> {\n    try {\n      return await apiClient.put<ICustomQuote>(`/api/customquote/${quoteId}`, updates);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Submit a custom quote for review\n   */\n  async submitCustomQuote(quoteId: string): Promise<IApiResponse<ICustomQuote>> {\n    try {\n      return await apiClient.post<ICustomQuote>(`/api/customquote/${quoteId}/submit`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel a custom quote\n   */\n  async cancelCustomQuote(quoteId: string): Promise<IApiResponse<boolean>> {\n    try {\n      return await apiClient.delete<boolean>(`/api/customquote/${quoteId}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get custom quote history\n   */\n  async getCustomQuoteHistory(): Promise<IApiResponse<ICustomQuote[]>> {\n    try {\n      return await apiClient.get<ICustomQuote[]>('/api/customquote/history');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Upload design files for a custom quote\n   */\n  async uploadDesignFiles(\n    quoteId: string,\n    files: File[]\n  ): Promise<IApiResponse<{ uploadedFiles: string[] }>> {\n    try {\n      const formData = new FormData();\n      files.forEach((file, index) => {\n        formData.append(`file${index}`, file);\n      });\n\n      return await apiClient.post(`/api/customquote/${quoteId}/upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const customQuoteAPI = new CustomQuoteAPI();","/**\n * Order Status API for AshiD Diamonds\n * Handles order status tracking and history\n */\n\nimport { apiClient } from './client';\nimport {\n  IOrderStatus,\n  IOrderStatusRequest,\n  IOrderStatusItem,\n  IApiResponse,\n} from './types';\n\nexport class OrderStatusAPI {\n  /**\n   * Get order status by web reference number\n   */\n  async getOrderStatusByWebReference(webReferenceNo: string): Promise<IApiResponse<IOrderStatus>> {\n    try {\n      return await apiClient.get<IOrderStatus>(`/api/orderstatus/webreference/${webReferenceNo}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get order status by PO number\n   */\n  async getOrderStatusByPO(poNo: string): Promise<IApiResponse<IOrderStatus>> {\n    try {\n      return await apiClient.get<IOrderStatus>(`/api/orderstatus/po/${poNo}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get order status by AshiD order number\n   */\n  async getOrderStatusByAshiOrderNo(ashiOrderNo: string): Promise<IApiResponse<IOrderStatus>> {\n    try {\n      return await apiClient.get<IOrderStatus>(`/api/orderstatus/ashi/${ashiOrderNo}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Search orders with flexible criteria\n   */\n  async searchOrderStatus(request: IOrderStatusRequest): Promise<IApiResponse<IOrderStatus[]>> {\n    try {\n      const queryParams = new URLSearchParams();\n      \n      if (request.webreference_no) queryParams.append('webreference_no', request.webreference_no);\n      if (request.po_no) queryParams.append('po_no', request.po_no);\n      if (request.ashi_order_no) queryParams.append('ashi_order_no', request.ashi_order_no);\n      if (request.order_status) queryParams.append('order_status', request.order_status);\n      if (request.start_date) queryParams.append('start_date', request.start_date);\n      if (request.end_date) queryParams.append('end_date', request.end_date);\n\n      const url = `/api/orderstatus/search${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\n      return await apiClient.get<IOrderStatus[]>(url);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get all orders for the current user\n   */\n  async getAllOrders(): Promise<IApiResponse<IOrderStatus[]>> {\n    try {\n      return await apiClient.get<IOrderStatus[]>('/api/orderstatus');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get orders by status\n   */\n  async getOrdersByStatus(status: string): Promise<IApiResponse<IOrderStatus[]>> {\n    try {\n      return await apiClient.get<IOrderStatus[]>(`/api/orderstatus?status=${encodeURIComponent(status)}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get recent orders (last 30 days)\n   */\n  async getRecentOrders(days: number = 30): Promise<IApiResponse<IOrderStatus[]>> {\n    try {\n      const endDate = new Date().toISOString().split('T')[0];\n      const startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n      \n      return await this.searchOrderStatus({\n        start_date: startDate,\n        end_date: endDate,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get pending orders\n   */\n  async getPendingOrders(): Promise<IApiResponse<IOrderStatus[]>> {\n    try {\n      return await this.getOrdersByStatus('pending');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get shipped orders\n   */\n  async getShippedOrders(): Promise<IApiResponse<IOrderStatus[]>> {\n    try {\n      return await this.getOrdersByStatus('shipped');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get delivered orders\n   */\n  async getDeliveredOrders(): Promise<IApiResponse<IOrderStatus[]>> {\n    try {\n      return await this.getOrdersByStatus('delivered');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Track shipment by tracking number\n   */\n  async trackShipment(trackingNo: string): Promise<IApiResponse<{\n    trackingNumber: string;\n    carrier: string;\n    status: string;\n    estimatedDelivery: string;\n    trackingEvents: Array<{\n      date: string;\n      status: string;\n      location: string;\n      description: string;\n    }>;\n  }>> {\n    try {\n      return await apiClient.get(`/api/orderstatus/track/${trackingNo}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get order timeline/history\n   */\n  async getOrderTimeline(orderNo: string): Promise<IApiResponse<Array<{\n    date: string;\n    status: string;\n    description: string;\n    notes?: string;\n  }>>> {\n    try {\n      return await apiClient.get(`/api/orderstatus/${orderNo}/timeline`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Update order status (if user has permission)\n   */\n  async updateOrderStatus(\n    orderNo: string,\n    status: string,\n    notes?: string\n  ): Promise<IApiResponse<IOrderStatus>> {\n    try {\n      return await apiClient.put<IOrderStatus>(`/api/orderstatus/${orderNo}`, {\n        status,\n        notes,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel an order (if cancellation is allowed)\n   */\n  async cancelOrder(orderNo: string, reason?: string): Promise<IApiResponse<IOrderStatus>> {\n    try {\n      return await apiClient.post<IOrderStatus>(`/api/orderstatus/${orderNo}/cancel`, {\n        reason,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Request order status notification\n   */\n  async subscribeToOrderUpdates(\n    orderNo: string,\n    email: string,\n    phone?: string\n  ): Promise<IApiResponse<boolean>> {\n    try {\n      return await apiClient.post<boolean>(`/api/orderstatus/${orderNo}/subscribe`, {\n        email,\n        phone,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get order documents (invoices, receipts, etc.)\n   */\n  async getOrderDocuments(orderNo: string): Promise<IApiResponse<Array<{\n    documentType: string;\n    documentUrl: string;\n    documentName: string;\n    createdDate: string;\n  }>>> {\n    try {\n      return await apiClient.get(`/api/orderstatus/${orderNo}/documents`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Download order document\n   */\n  async downloadOrderDocument(orderNo: string, documentId: string): Promise<IApiResponse<Blob>> {\n    try {\n      return await apiClient.get(`/api/orderstatus/${orderNo}/documents/${documentId}/download`, {\n        responseType: 'blob',\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const orderStatusAPI = new OrderStatusAPI();","/**\n * Catalog/Program API for AshiD Diamonds\n * Handles catalog and program management functionality\n */\n\nimport { apiClient } from './client';\nimport {\n  IProgramInfo,\n  ICatalogInfo,\n  ISpecialOrderInfo,\n  IProduct,\n  IApiResponse,\n} from './types';\n\nexport class CatalogProgramAPI {\n  /**\n   * Get program information by PPCC ID\n   */\n  async getProgramInfo(ppccId: string): Promise<IApiResponse<IProgramInfo>> {\n    try {\n      return await apiClient.get<IProgramInfo>(`/api/catalogprogram/ppcc/${ppccId}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get all available programs\n   */\n  async getAllPrograms(): Promise<IApiResponse<IProgramInfo[]>> {\n    try {\n      return await apiClient.get<IProgramInfo[]>('/api/catalogprogram/programs');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get catalog information by catalog ID\n   */\n  async getCatalogInfo(catalogId: string): Promise<IApiResponse<ICatalogInfo>> {\n    try {\n      return await apiClient.get<ICatalogInfo>(`/api/catalogprogram/catalog/${catalogId}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get all available catalogs\n   */\n  async getAllCatalogs(): Promise<IApiResponse<ICatalogInfo[]>> {\n    try {\n      return await apiClient.get<ICatalogInfo[]>('/api/catalogprogram/catalogs');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get active catalogs (currently effective)\n   */\n  async getActiveCatalogs(): Promise<IApiResponse<ICatalogInfo[]>> {\n    try {\n      return await apiClient.get<ICatalogInfo[]>('/api/catalogprogram/catalogs/active');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get products by program/catalog\n   */\n  async getProductsByProgram(ppccId: string, params?: {\n    page?: number;\n    limit?: number;\n    category?: string;\n    sortBy?: string;\n    sortOrder?: 'asc' | 'desc';\n  }): Promise<IApiResponse<{\n    products: IProduct[];\n    totalCount: number;\n    programInfo: IProgramInfo;\n  }>> {\n    try {\n      const queryParams = new URLSearchParams();\n      \n      if (params?.page) queryParams.append('page', params.page.toString());\n      if (params?.limit) queryParams.append('limit', params.limit.toString());\n      if (params?.category) queryParams.append('category', params.category);\n      if (params?.sortBy) queryParams.append('sortBy', params.sortBy);\n      if (params?.sortOrder) queryParams.append('sortOrder', params.sortOrder);\n\n      const url = `/api/catalogprogram/ppcc/${ppccId}/products${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\n      return await apiClient.get(url);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get products by catalog\n   */\n  async getProductsByCatalog(catalogId: string, params?: {\n    page?: number;\n    limit?: number;\n    category?: string;\n    sortBy?: string;\n    sortOrder?: 'asc' | 'desc';\n  }): Promise<IApiResponse<{\n    products: IProduct[];\n    totalCount: number;\n    catalogInfo: ICatalogInfo;\n  }>> {\n    try {\n      const queryParams = new URLSearchParams();\n      \n      if (params?.page) queryParams.append('page', params.page.toString());\n      if (params?.limit) queryParams.append('limit', params.limit.toString());\n      if (params?.category) queryParams.append('category', params.category);\n      if (params?.sortBy) queryParams.append('sortBy', params.sortBy);\n      if (params?.sortOrder) queryParams.append('sortOrder', params.sortOrder);\n\n      const url = `/api/catalogprogram/catalog/${catalogId}/products${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\n      return await apiClient.get(url);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get special order information for a program\n   */\n  async getSpecialOrderInfo(ppccId: string): Promise<IApiResponse<ISpecialOrderInfo>> {\n    try {\n      return await apiClient.get<ISpecialOrderInfo>(`/api/catalogprogram/ppcc/${ppccId}/specialorder`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Check if a product is available in a specific program\n   */\n  async checkProductInProgram(ppccId: string, itemcd: string): Promise<IApiResponse<{\n    available: boolean;\n    programInfo: IProgramInfo;\n    productInfo?: IProduct;\n    specialOrderAvailable?: boolean;\n  }>> {\n    try {\n      return await apiClient.get(`/api/catalogprogram/ppcc/${ppccId}/product/${itemcd}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get program pricing for a product\n   */\n  async getProgramPricing(ppccId: string, itemcd: string): Promise<IApiResponse<{\n    regularPrice: number;\n    programPrice: number;\n    discount: number;\n    discountPercentage: number;\n    specialOffers?: Array<{\n      offerType: string;\n      offerValue: number;\n      description: string;\n      validUntil?: string;\n    }>;\n  }>> {\n    try {\n      return await apiClient.get(`/api/catalogprogram/ppcc/${ppccId}/product/${itemcd}/pricing`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Search programs by criteria\n   */\n  async searchPrograms(criteria: {\n    programName?: string;\n    catalogName?: string;\n    active?: boolean;\n    hasSpecialOrder?: boolean;\n  }): Promise<IApiResponse<IProgramInfo[]>> {\n    try {\n      const queryParams = new URLSearchParams();\n      \n      if (criteria.programName) queryParams.append('programName', criteria.programName);\n      if (criteria.catalogName) queryParams.append('catalogName', criteria.catalogName);\n      if (criteria.active !== undefined) queryParams.append('active', criteria.active.toString());\n      if (criteria.hasSpecialOrder !== undefined) queryParams.append('hasSpecialOrder', criteria.hasSpecialOrder.toString());\n\n      const url = `/api/catalogprogram/search${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\n      return await apiClient.get<IProgramInfo[]>(url);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get program categories\n   */\n  async getProgramCategories(ppccId: string): Promise<IApiResponse<Array<{\n    categoryName: string;\n    categoryId: string;\n    productCount: number;\n    subcategories?: Array<{\n      name: string;\n      id: string;\n      productCount: number;\n    }>;\n  }>>> {\n    try {\n      return await apiClient.get(`/api/catalogprogram/ppcc/${ppccId}/categories`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get catalog expiry information\n   */\n  async getCatalogExpiry(catalogId: string): Promise<IApiResponse<{\n    catalogId: string;\n    catalogName: string;\n    expiryDate: string;\n    daysUntilExpiry: number;\n    isExpired: boolean;\n    renewalInfo?: {\n      newCatalogId?: string;\n      renewalDate?: string;\n      migrationRequired?: boolean;\n    };\n  }>> {\n    try {\n      return await apiClient.get(`/api/catalogprogram/catalog/${catalogId}/expiry`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Subscribe to program updates\n   */\n  async subscribeToProgramUpdates(ppccId: string, email: string): Promise<IApiResponse<boolean>> {\n    try {\n      return await apiClient.post<boolean>(`/api/catalogprogram/ppcc/${ppccId}/subscribe`, {\n        email,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get program statistics\n   */\n  async getProgramStatistics(ppccId: string): Promise<IApiResponse<{\n    totalProducts: number;\n    categoriesCount: number;\n    averagePrice: number;\n    priceRange: {\n      min: number;\n      max: number;\n    };\n    specialOrderEnabled: boolean;\n    popularCategories: Array<{\n      categoryName: string;\n      productCount: number;\n    }>;\n  }>> {\n    try {\n      return await apiClient.get(`/api/catalogprogram/ppcc/${ppccId}/statistics`);\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const catalogProgramAPI = new CatalogProgramAPI();","/**\n * Email API for AshiD Diamonds\n * Handles limited email functionality as found in Swagger documentation\n */\n\nimport { apiClient } from './client';\nimport {\n  IEmailStyleDetailsFields,\n  IEmailStyleDetailsRequest,\n  IApiResponse,\n} from './types';\n\nexport class EmailAPI {\n  /**\n   * Get email style details fields (from Swagger)\n   * This appears to be the main email-related endpoint available\n   */\n  async getEmailStyleDetailsFields(): Promise<IApiResponse<IEmailStyleDetailsFields>> {\n    try {\n      return await apiClient.get<IEmailStyleDetailsFields>('/api/email/styledetails/fields');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Send email with style details\n   */\n  async sendEmailStyleDetails(request: IEmailStyleDetailsRequest): Promise<IApiResponse<boolean>> {\n    try {\n      return await apiClient.post<boolean>('/api/email/styledetails/send', request);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Send product details via email\n   * Alternative endpoint that might be available\n   */\n  async sendProductByEmail(request: {\n    itemcd: string;\n    recipientEmail: string;\n    senderEmail?: string;\n    senderName?: string;\n    personalMessage?: string;\n  }): Promise<IApiResponse<boolean>> {\n    try {\n      return await apiClient.post<boolean>('/api/email/product/send', request);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Share product via email\n   */\n  async shareProduct(request: {\n    itemcd: string;\n    recipientEmail: string;\n    senderEmail: string;\n    senderName: string;\n    message?: string;\n  }): Promise<IApiResponse<boolean>> {\n    try {\n      return await apiClient.post<boolean>('/api/email/share/product', request);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Send inquiry email about a product\n   */\n  async sendProductInquiry(request: {\n    itemcd: string;\n    customerEmail: string;\n    customerName: string;\n    customerPhone?: string;\n    inquiryMessage: string;\n    requestCallback?: boolean;\n  }): Promise<IApiResponse<boolean>> {\n    try {\n      return await apiClient.post<boolean>('/api/email/inquiry', request);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Subscribe to email notifications\n   */\n  async subscribeToNotifications(request: {\n    email: string;\n    name?: string;\n    preferences: {\n      newArrivals?: boolean;\n      salesAlerts?: boolean;\n      priceDrops?: boolean;\n      newsletter?: boolean;\n    };\n  }): Promise<IApiResponse<boolean>> {\n    try {\n      return await apiClient.post<boolean>('/api/email/subscribe', request);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Unsubscribe from email notifications\n   */\n  async unsubscribeFromNotifications(email: string, token?: string): Promise<IApiResponse<boolean>> {\n    try {\n      const requestData = { email };\n      if (token) {\n        (requestData as any).unsubscribeToken = token;\n      }\n      \n      return await apiClient.post<boolean>('/api/email/unsubscribe', requestData);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get email templates (if available)\n   */\n  async getEmailTemplates(): Promise<IApiResponse<Array<{\n    templateId: string;\n    templateName: string;\n    description: string;\n    fields: Array<{\n      fieldName: string;\n      fieldType: string;\n      required: boolean;\n    }>;\n  }>>> {\n    try {\n      return await apiClient.get('/api/email/templates');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Send custom email using template\n   */\n  async sendTemplateEmail(request: {\n    templateId: string;\n    recipientEmail: string;\n    templateData: Record<string, any>;\n    senderEmail?: string;\n    senderName?: string;\n  }): Promise<IApiResponse<boolean>> {\n    try {\n      return await apiClient.post<boolean>('/api/email/template/send', request);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Request price quote via email\n   */\n  async requestPriceQuote(request: {\n    itemcd: string;\n    customerEmail: string;\n    customerName: string;\n    customerPhone?: string;\n    quantity?: number;\n    specialRequirements?: string;\n  }): Promise<IApiResponse<boolean>> {\n    try {\n      return await apiClient.post<boolean>('/api/email/quote/request', request);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Send availability notification request\n   */\n  async requestAvailabilityNotification(request: {\n    itemcd: string;\n    customerEmail: string;\n    customerName?: string;\n    notifyWhenAvailable: boolean;\n    notifyOnPriceChange?: boolean;\n  }): Promise<IApiResponse<boolean>> {\n    try {\n      return await apiClient.post<boolean>('/api/email/availability/notify', request);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Send appointment request email\n   */\n  async requestAppointment(request: {\n    customerName: string;\n    customerEmail: string;\n    customerPhone: string;\n    preferredDate?: string;\n    preferredTime?: string;\n    appointmentType: 'consultation' | 'viewing' | 'custom_design' | 'other';\n    message?: string;\n    interestedProducts?: string[];\n  }): Promise<IApiResponse<boolean>> {\n    try {\n      return await apiClient.post<boolean>('/api/email/appointment/request', request);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Send contact form email\n   */\n  async sendContactForm(request: {\n    name: string;\n    email: string;\n    phone?: string;\n    subject: string;\n    message: string;\n    inquiryType?: 'general' | 'product' | 'order' | 'custom' | 'support';\n  }): Promise<IApiResponse<boolean>> {\n    try {\n      return await apiClient.post<boolean>('/api/email/contact', request);\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const emailAPI = new EmailAPI();","/**\n * Internal User API Integration\n * Handles user creation through the internal API instead of direct Freshchat API\n * Uses host_auth_token for authentication\n */\n\nimport {\n  IInternalUserRequest,\n  IInternalUserResponse\n} from './types';\n\n/**\n * Internal User API Client Class\n */\nexport class InternalUserAPI {\n  private baseURL: string;\n\n  constructor(baseURL: string = '') {\n    // Base URL will be determined dynamically or from environment\n    this.baseURL = baseURL;\n  }\n\n  /**\n   * Get headers for internal API requests with host_auth_token\n   */\n  private getHeaders(hostAuthToken: string): HeadersInit {\n    return {\n      'accept': 'application/json',\n      'Authorization': `Bearer ${hostAuthToken}`,\n      'Content-Type': 'application/json'\n    };\n  }\n\n  /**\n   * Create a new user through the internal API\n   */\n  async createUser(\n    userRequest: IInternalUserRequest, \n    hostAuthToken: string,\n    apiBaseURL?: string\n  ): Promise<IInternalUserResponse> {\n    try {\n      // Use provided API base URL or construct from current location\n      const baseUrl = apiBaseURL || this.getApiBaseURL();\n      \n      // Validate required fields\n      const requiredFields = ['user_email', 'org_id', 'user_name', 'first_name', 'last_name', 'phone', 'reference_id'];\n      for (const field of requiredFields) {\n        if (!userRequest[field as keyof IInternalUserRequest]) {\n          return {\n            success: false,\n            message: `Missing required field: ${field}`,\n            error_details: { field, value: userRequest[field as keyof IInternalUserRequest] }\n          };\n        }\n      }\n\n      if (!hostAuthToken) {\n        return {\n          success: false,\n          message: 'host_auth_token is required for authentication',\n          error_details: { missing_token: true }\n        };\n      }\n\n      // Make API call to internal user creation endpoint\n      const response = await fetch(`${baseUrl}/api/v1/user/create`, {\n        method: 'POST',\n        headers: this.getHeaders(hostAuthToken),\n        body: JSON.stringify(userRequest)\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        console.error('Internal User API error:', data);\n        return {\n          success: false,\n          message: 'Failed to create user through internal API',\n          error_details: {\n            status: response.status,\n            statusText: response.statusText,\n            data\n          }\n        };\n      }\n\n      // Extract both user_id and freshchat_user_id from response\n      const userId = data.id || data.user_id;\n      const freshchatUserId = data.freshchat_user_id;\n\n      // Store user data in localStorage for future use\n      if (typeof window !== 'undefined') {\n        const userStorageKey = `internal_user_${userRequest.reference_id}`;\n        const storageData = {\n          user_id: userId,\n          freshchat_user_id: freshchatUserId,\n          reference_id: userRequest.reference_id,\n          org_id: userRequest.org_id,\n          user_email: userRequest.user_email,\n          created_at: new Date().toISOString(),\n          user_data: data\n        };\n        \n        localStorage.setItem(userStorageKey, JSON.stringify(storageData));\n        localStorage.setItem('internal_last_created_user', userId);\n        \n        // Also store the freshchat_user_id separately if available\n        if (freshchatUserId) {\n          localStorage.setItem('internal_last_created_freshchat_user', freshchatUserId);\n          \n          // Store mapping between user_id and freshchat_user_id\n          const mappingKey = `user_freshchat_mapping_${userId}`;\n          localStorage.setItem(mappingKey, freshchatUserId);\n        }\n        \n        console.log(`✅ Internal user stored in localStorage with key: ${userStorageKey}`);\n        console.log(`   - user_id: ${userId}`);\n        console.log(`   - freshchat_user_id: ${freshchatUserId || 'Not provided'}`);\n      }\n\n      return {\n        success: true,\n        user_id: userId,\n        freshchat_user_id: freshchatUserId,\n        message: 'User created successfully through internal API',\n        user_data: data\n      };\n\n    } catch (error) {\n      console.error('Error creating internal user:', error);\n      return {\n        success: false,\n        message: 'Internal error while creating user',\n        error_details: {\n          error: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n\n  /**\n   * Get API base URL for services API (different from local origin)\n   */\n  private getApiBaseURL(): string {\n    // Services API is running on a different server\n    return process.env.NEXT_PUBLIC_SERVICES_API_URL || 'http://192.168.50.19:8000';\n  }\n\n  /**\n   * Create user with automatic org_id and user_name generation\n   */\n  async createUserSimplified(\n    email: string,\n    firstName: string,\n    lastName: string,\n    phone: string,\n    referenceId: string,\n    orgId: string,\n    hostAuthToken: string,\n    apiBaseURL?: string\n  ): Promise<IInternalUserResponse> {\n    const userRequest: IInternalUserRequest = {\n      user_email: email,\n      org_id: orgId,\n      user_name: `${firstName.toLowerCase()}.${lastName.toLowerCase()}`, // Auto-generate username\n      first_name: firstName,\n      last_name: lastName,\n      phone: phone,\n      reference_id: referenceId\n    };\n\n    return this.createUser(userRequest, hostAuthToken, apiBaseURL);\n  }\n\n  /**\n   * Convert legacy Freshchat request to internal API format\n   */\n  convertFromFreshchatRequest(\n    freshchatRequest: { \n      email: string; \n      first_name: string; \n      last_name: string; \n      phone?: string; \n      reference_id: string; \n      jeweler_id: string; \n    }\n  ): IInternalUserRequest {\n    return {\n      user_email: freshchatRequest.email,\n      org_id: freshchatRequest.jeweler_id, // Use jeweler_id as org_id\n      user_name: `${freshchatRequest.first_name.toLowerCase()}.${freshchatRequest.last_name.toLowerCase()}`,\n      first_name: freshchatRequest.first_name,\n      last_name: freshchatRequest.last_name,\n      phone: freshchatRequest.phone || '',\n      reference_id: freshchatRequest.reference_id\n    };\n  }\n}\n\n// Default instance\nexport const internalUserAPI = new InternalUserAPI();\n\n// Individual functions for easier imports\nexport const createInternalUser = (\n  userRequest: IInternalUserRequest, \n  hostAuthToken: string,\n  apiBaseURL?: string\n) => internalUserAPI.createUser(userRequest, hostAuthToken, apiBaseURL);\n\nexport const createInternalUserSimplified = (\n  email: string,\n  firstName: string,\n  lastName: string,\n  phone: string,\n  referenceId: string,\n  orgId: string,\n  hostAuthToken: string,\n  apiBaseURL?: string\n) => internalUserAPI.createUserSimplified(email, firstName, lastName, phone, referenceId, orgId, hostAuthToken, apiBaseURL);\n\n/**\n * LocalStorage Management Functions for Internal Users\n */\n\n/**\n * Get stored internal user data by reference ID\n */\nexport const getStoredInternalUser = (referenceId: string) => {\n  if (typeof window === 'undefined') return null;\n  \n  try {\n    const userStorageKey = `internal_user_${referenceId}`;\n    const storedData = localStorage.getItem(userStorageKey);\n    \n    if (storedData) {\n      return JSON.parse(storedData);\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Error retrieving stored internal user:', error);\n    return null;\n  }\n};\n\n/**\n * Get the last created internal user ID\n */\nexport const getLastCreatedInternalUserId = (): string | null => {\n  if (typeof window === 'undefined') return null;\n  \n  try {\n    return localStorage.getItem('internal_last_created_user');\n  } catch (error) {\n    console.error('Error retrieving last created internal user ID:', error);\n    return null;\n  }\n};\n\n/**\n * Get the last created Freshchat user ID (from internal API response)\n */\nexport const getLastCreatedInternalFreshchatUserId = (): string | null => {\n  if (typeof window === 'undefined') return null;\n  \n  try {\n    return localStorage.getItem('internal_last_created_freshchat_user');\n  } catch (error) {\n    console.error('Error retrieving last created Freshchat user ID:', error);\n    return null;\n  }\n};\n\n/**\n * Get Freshchat user ID by internal user ID\n */\nexport const getFreshchatUserIdByUserId = (userId: string): string | null => {\n  if (typeof window === 'undefined') return null;\n  \n  try {\n    const mappingKey = `user_freshchat_mapping_${userId}`;\n    return localStorage.getItem(mappingKey);\n  } catch (error) {\n    console.error('Error retrieving Freshchat user ID mapping:', error);\n    return null;\n  }\n};\n\n/**\n * Get both user IDs for a reference ID\n */\nexport const getUserIdsByReferenceId = (referenceId: string): { user_id: string | null, freshchat_user_id: string | null } => {\n  const userData = getStoredInternalUser(referenceId);\n  \n  if (userData) {\n    return {\n      user_id: userData.user_id || null,\n      freshchat_user_id: userData.freshchat_user_id || null\n    };\n  }\n  \n  return {\n    user_id: null,\n    freshchat_user_id: null\n  };\n};\n\n/**\n * Get all stored internal users\n */\nexport const getAllStoredInternalUsers = () => {\n  if (typeof window === 'undefined') return [];\n  \n  try {\n    const users = [];\n    const keys = Object.keys(localStorage);\n    \n    for (const key of keys) {\n      if (key.startsWith('internal_user_')) {\n        const userData = localStorage.getItem(key);\n        if (userData) {\n          users.push(JSON.parse(userData));\n        }\n      }\n    }\n    \n    return users;\n  } catch (error) {\n    console.error('Error retrieving all stored internal users:', error);\n    return [];\n  }\n};\n\n/**\n * Check if internal user exists in localStorage\n */\nexport const isInternalUserStoredLocally = (referenceId: string): boolean => {\n  if (typeof window === 'undefined') return false;\n  \n  const userStorageKey = `internal_user_${referenceId}`;\n  return localStorage.getItem(userStorageKey) !== null;\n};\n\n/**\n * Get host auth token from localStorage or other storage\n */\nexport const getHostAuthToken = (): string | null => {\n  if (typeof window === 'undefined') return null;\n  \n  try {\n    // Try different possible storage keys for host auth token\n    return localStorage.getItem('host_auth_token') || \n           localStorage.getItem('hostAuthToken') ||\n           sessionStorage.getItem('host_auth_token') ||\n           sessionStorage.getItem('hostAuthToken') ||\n           null;\n  } catch (error) {\n    console.error('Error retrieving host auth token:', error);\n    return null;\n  }\n};","/**\n * Session API Integration\n * Handles session creation through the internal API\n * Replaces existing session management with new API endpoint\n */\n\nimport {\n  ICreateSessionRequest,\n  ICreateSessionResponse\n} from './types';\n\n/**\n * Session API Client Class\n */\nexport class SessionAPI {\n  private baseURL: string;\n\n  constructor(baseURL: string = '') {\n    // Base URL will be determined dynamically or from environment\n    this.baseURL = baseURL;\n  }\n\n  /**\n   * Get headers for session API requests with host_auth_token\n   */\n  private getHeaders(hostAuthToken?: string): HeadersInit {\n    const headers: HeadersInit = {\n      'accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n    \n    // Use provided token or fallback to hardcoded token\n    const token = hostAuthToken || 'hardcoded_dev_token_12345_abcdef';\n    headers['Authorization'] = `Bearer ${token}`;\n    \n    return headers;\n  }\n\n  /**\n   * Create a new session through the internal API\n   */\n  async createSession(\n    sessionRequest: ICreateSessionRequest,\n    hostAuthToken?: string,\n    apiBaseURL?: string\n  ): Promise<ICreateSessionResponse> {\n    try {\n      // Use provided API base URL or construct from current location\n      const baseUrl = apiBaseURL || this.getApiBaseURL();\n      \n      // Validate required fields\n      if (!sessionRequest.user_id) {\n        return {\n          success: false,\n          message: 'Missing required field: user_id'\n        };\n      }\n\n      if (!sessionRequest.auth_token) {\n        return {\n          success: false,\n          message: 'Missing required field: auth_token'\n        };\n      }\n\n      // hostAuthToken is now optional - will use hardcoded fallback if not provided\n      if (!hostAuthToken) {\n        console.warn('⚠️ No host_auth_token provided - using hardcoded fallback for development');\n      }\n\n      // Debug logging\n      console.log('📤 Session API Request:', {\n        url: `${baseUrl}/api/v1/session/create`,\n        headers: this.getHeaders(hostAuthToken),\n        body: sessionRequest\n      });\n\n      // Make API call to session creation endpoint\n      const response = await fetch(`${baseUrl}/api/v1/session/create`, {\n        method: 'POST',\n        headers: this.getHeaders(hostAuthToken),\n        body: JSON.stringify(sessionRequest)\n      });\n\n      const data = await response.json();\n\n      // Debug logging\n      console.log('📥 Session API Response:', {\n        status: response.status,\n        statusText: response.statusText,\n        ok: response.ok,\n        data: data\n      });\n\n      if (!response.ok) {\n        console.error('❌ Session API error:', data);\n        return {\n          success: false,\n          message: 'Failed to create session through internal API',\n          error_details: {\n            status: response.status,\n            statusText: response.statusText,\n            data\n          }\n        };\n      }\n\n      // Store session data in localStorage for future use\n      if (typeof window !== 'undefined') {\n        const sessionStorageKey = `session_${sessionRequest.user_id}`;\n        const sessionData = {\n          session_id: data.id || data.session_id,\n          user_id: sessionRequest.user_id,\n          auth_token: sessionRequest.auth_token,\n          metadata: sessionRequest.metadata,\n          created_at: new Date().toISOString(),\n          session_data: data\n        };\n        \n        localStorage.setItem(sessionStorageKey, JSON.stringify(sessionData));\n        localStorage.setItem('last_created_session', data.id || data.session_id);\n        localStorage.setItem('current_active_session', data.id || data.session_id);\n        \n        // Store session mapping for easy lookup\n        const sessionMappingKey = `session_mapping_${data.id || data.session_id}`;\n        localStorage.setItem(sessionMappingKey, sessionRequest.user_id);\n        \n        console.log(`✅ Session stored in localStorage with key: ${sessionStorageKey}`);\n        console.log(`   - session_id: ${data.id || data.session_id}`);\n        console.log(`   - user_id: ${sessionRequest.user_id}`);\n      }\n\n      return {\n        success: true,\n        session_id: data.id || data.session_id,\n        message: 'Session created successfully through internal API',\n        session_data: data\n      };\n\n    } catch (error) {\n      console.error('Error creating session:', error);\n      return {\n        success: false,\n        message: 'Internal error while creating session',\n        error_details: {\n          error: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n\n  /**\n   * Create session with simplified parameters\n   */\n  async createSessionSimplified(\n    userId: string,\n    authToken: string,\n    hostAuthToken: string,\n    metadata?: { [key: string]: any },\n    apiBaseURL?: string\n  ): Promise<ICreateSessionResponse> {\n    const sessionRequest: ICreateSessionRequest = {\n      user_id: userId,\n      auth_token: authToken,\n      metadata: metadata || {}\n    };\n\n    return this.createSession(sessionRequest, hostAuthToken, apiBaseURL);\n  }\n\n  /**\n   * Get API base URL for services API (different from local origin)\n   */\n  private getApiBaseURL(): string {\n    // Services API is running on a different server\n    return process.env.NEXT_PUBLIC_SERVICES_API_URL || 'http://192.168.50.19:8000';\n  }\n}\n\n// Default instance\nexport const sessionAPI = new SessionAPI();\n\n// Individual functions for easier imports\nexport const createSession = (\n  sessionRequest: ICreateSessionRequest,\n  hostAuthToken?: string,\n  apiBaseURL?: string\n) => sessionAPI.createSession(sessionRequest, hostAuthToken, apiBaseURL);\n\nexport const createSessionSimplified = (\n  userId: string,\n  authToken: string,\n  hostAuthToken: string,\n  metadata?: { [key: string]: any },\n  apiBaseURL?: string\n) => sessionAPI.createSessionSimplified(userId, authToken, hostAuthToken, metadata, apiBaseURL);\n\n/**\n * LocalStorage Management Functions for Sessions\n */\n\n/**\n * Get stored session data by user ID\n */\nexport const getStoredSession = (userId: string) => {\n  if (typeof window === 'undefined') return null;\n  \n  try {\n    const sessionStorageKey = `session_${userId}`;\n    const storedData = localStorage.getItem(sessionStorageKey);\n    \n    if (storedData) {\n      return JSON.parse(storedData);\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Error retrieving stored session:', error);\n    return null;\n  }\n};\n\n/**\n * Get the last created session ID\n */\nexport const getLastCreatedSessionId = (): string | null => {\n  if (typeof window === 'undefined') return null;\n  \n  try {\n    return localStorage.getItem('last_created_session');\n  } catch (error) {\n    console.error('Error retrieving last created session ID:', error);\n    return null;\n  }\n};\n\n/**\n * Get the current active session ID\n */\nexport const getCurrentActiveSessionId = (): string | null => {\n  if (typeof window === 'undefined') return null;\n  \n  try {\n    return localStorage.getItem('current_active_session');\n  } catch (error) {\n    console.error('Error retrieving current active session ID:', error);\n    return null;\n  }\n};\n\n/**\n * Get user ID by session ID\n */\nexport const getUserIdBySessionId = (sessionId: string): string | null => {\n  if (typeof window === 'undefined') return null;\n  \n  try {\n    const sessionMappingKey = `session_mapping_${sessionId}`;\n    return localStorage.getItem(sessionMappingKey);\n  } catch (error) {\n    console.error('Error retrieving user ID by session ID:', error);\n    return null;\n  }\n};\n\n/**\n * Get all stored sessions\n */\nexport const getAllStoredSessions = () => {\n  if (typeof window === 'undefined') return [];\n  \n  try {\n    const sessions = [];\n    const keys = Object.keys(localStorage);\n    \n    for (const key of keys) {\n      if (key.startsWith('session_') && !key.includes('mapping')) {\n        const sessionData = localStorage.getItem(key);\n        if (sessionData) {\n          sessions.push(JSON.parse(sessionData));\n        }\n      }\n    }\n    \n    return sessions;\n  } catch (error) {\n    console.error('Error retrieving all stored sessions:', error);\n    return [];\n  }\n};\n\n/**\n * Check if session exists in localStorage\n */\nexport const isSessionStoredLocally = (userId: string): boolean => {\n  if (typeof window === 'undefined') return false;\n  \n  const sessionStorageKey = `session_${userId}`;\n  return localStorage.getItem(sessionStorageKey) !== null;\n};\n\n/**\n * Remove stored session data\n */\nexport const removeStoredSession = (userId: string): boolean => {\n  if (typeof window === 'undefined') return false;\n  \n  try {\n    const sessionStorageKey = `session_${userId}`;\n    const sessionData = getStoredSession(userId);\n    \n    // Remove main session data\n    localStorage.removeItem(sessionStorageKey);\n    \n    // Remove session mapping if exists\n    if (sessionData?.session_id) {\n      const sessionMappingKey = `session_mapping_${sessionData.session_id}`;\n      localStorage.removeItem(sessionMappingKey);\n    }\n    \n    console.log(`🗑️ Removed stored session for user: ${userId}`);\n    return true;\n  } catch (error) {\n    console.error('Error removing stored session:', error);\n    return false;\n  }\n};\n\n/**\n * Clear all stored session data\n */\nexport const clearAllStoredSessions = (): boolean => {\n  if (typeof window === 'undefined') return false;\n  \n  try {\n    const keys = Object.keys(localStorage);\n    let removedCount = 0;\n    \n    for (const key of keys) {\n      if (key.startsWith('session_') || \n          key === 'last_created_session' || \n          key === 'current_active_session') {\n        localStorage.removeItem(key);\n        removedCount++;\n      }\n    }\n    \n    console.log(`🗑️ Cleared ${removedCount} stored sessions`);\n    return true;\n  } catch (error) {\n    console.error('Error clearing stored sessions:', error);\n    return false;\n  }\n};\n\n/**\n * Set current active session\n */\nexport const setCurrentActiveSession = (sessionId: string): boolean => {\n  if (typeof window === 'undefined') return false;\n  \n  try {\n    localStorage.setItem('current_active_session', sessionId);\n    console.log(`✅ Set current active session: ${sessionId}`);\n    return true;\n  } catch (error) {\n    console.error('Error setting current active session:', error);\n    return false;\n  }\n};","/**\n * Freshchat API Integration\n * Handles user creation and management in Freshchat\n */\n\nimport {\n  IFreshchatUserRequest,\n  IFreshchatUserResponse,\n  IFreshchatAPIPayload,\n  IFreshchatUser,\n  IFreshchatUsersResponse,\n  IFreshchatProperty,\n  IFreshchatSendMessageRequest,\n  IFreshchatSendMessageResponse,\n  IFreshchatConversation,\n  IFreshchatGetConversationResponse\n} from './types';\n\n// Freshchat Configuration - Now using environment variables\nconst FRESHCHAT_BASE_URL = process.env.NEXT_PUBLIC_FRESHCHAT_BASE_URL || 'https://ashi-860828023240121150-bf24686de08d2d817516021.freshchat.com/v2';\nconst FRESHCHAT_TOKEN = process.env.FRESHCHAT_TOKEN || process.env.NEXT_PUBLIC_FRESHCHAT_TOKEN || '';\n\n/**\n * Freshchat API Client Class\n */\nexport class FreshchatAPI {\n  private baseURL: string;\n  private token: string;\n\n  constructor(baseURL: string = FRESHCHAT_BASE_URL, token: string = FRESHCHAT_TOKEN) {\n    this.baseURL = baseURL;\n    this.token = token;\n  }\n\n  /**\n   * Get default headers for Freshchat API requests\n   */\n  private getHeaders(assumeIdentity: boolean = false): HeadersInit {\n    return {\n      'accept': 'application/json',\n      'Authorization': `Bearer ${this.token}`,\n      'Content-Type': 'application/json',\n      'ASSUME-IDENTITY': assumeIdentity.toString()\n    };\n  }\n\n  /**\n   * Create a new user in Freshchat\n   */\n  async createUser(userRequest: IFreshchatUserRequest): Promise<IFreshchatUserResponse> {\n    try {\n      // Validate required fields\n      const requiredFields = ['email', 'first_name', 'last_name', 'reference_id', 'jeweler_id'];\n      for (const field of requiredFields) {\n        if (!userRequest[field as keyof IFreshchatUserRequest]) {\n          return {\n            success: false,\n            message: `Missing required field: ${field}`,\n            error_details: { field, value: userRequest[field as keyof IFreshchatUserRequest] }\n          };\n        }\n      }\n\n      // Prepare Freshchat API payload\n      const payload: IFreshchatAPIPayload = {\n        email: userRequest.email,\n        first_name: userRequest.first_name,\n        last_name: userRequest.last_name,\n        reference_id: userRequest.reference_id,\n        properties: [\n          {\n            name: 'jeweler_id',\n            value: userRequest.jeweler_id\n          }\n        ]\n      };\n\n      // Add phone if provided\n      if (userRequest.phone) {\n        payload.phone = userRequest.phone;\n      }\n\n      // Make API call to Freshchat\n      const response = await fetch(`${this.baseURL}/users`, {\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: JSON.stringify(payload)\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        console.error('Freshchat API error:', data);\n        return {\n          success: false,\n          message: 'Failed to create user in Freshchat',\n          error_details: {\n            status: response.status,\n            statusText: response.statusText,\n            data\n          }\n        };\n      }\n\n      // Store user ID in localStorage for future use\n      if (typeof window !== 'undefined') {\n        const userStorageKey = `freshchat_user_${userRequest.reference_id}`;\n        const storageData = {\n          freshchat_user_id: data.id,\n          reference_id: userRequest.reference_id,\n          jeweler_id: userRequest.jeweler_id,\n          email: userRequest.email,\n          created_at: new Date().toISOString(),\n          user_data: data\n        };\n        \n        localStorage.setItem(userStorageKey, JSON.stringify(storageData));\n        localStorage.setItem('freshchat_last_created_user', data.id);\n        \n        console.log(`✅ Freshchat user stored in localStorage with key: ${userStorageKey}`);\n      }\n\n      return {\n        success: true,\n        freshchat_user_id: data.id,\n        message: 'User created successfully in Freshchat',\n        user_data: data\n      };\n\n    } catch (error) {\n      console.error('Error creating Freshchat user:', error);\n      return {\n        success: false,\n        message: 'Internal error while creating user',\n        error_details: {\n          error: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n\n  /**\n   * Get user by reference_id\n   */\n  async getUserByReferenceId(referenceId: string): Promise<IFreshchatUserResponse> {\n    try {\n      if (!referenceId) {\n        return {\n          success: false,\n          message: 'reference_id is required'\n        };\n      }\n\n      const response = await fetch(\n        `${this.baseURL}/users?reference_id=${encodeURIComponent(referenceId)}`,\n        {\n          method: 'GET',\n          headers: this.getHeaders()\n        }\n      );\n\n      const data: IFreshchatUsersResponse = await response.json();\n\n      if (!response.ok) {\n        console.error('Freshchat API error:', data);\n        return {\n          success: false,\n          message: 'Failed to retrieve user from Freshchat',\n          error_details: {\n            status: response.status,\n            statusText: response.statusText,\n            data\n          }\n        };\n      }\n\n      return {\n        success: true,\n        message: 'User retrieved successfully',\n        user_data: data\n      };\n\n    } catch (error) {\n      console.error('Error retrieving Freshchat user:', error);\n      return {\n        success: false,\n        message: 'Internal error while retrieving user',\n        error_details: {\n          error: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n\n  /**\n   * Get user by ID\n   */\n  async getUserById(userId: string): Promise<IFreshchatUserResponse> {\n    try {\n      if (!userId) {\n        return {\n          success: false,\n          message: 'userId is required'\n        };\n      }\n\n      const response = await fetch(`${this.baseURL}/users/${userId}`, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        console.error('Freshchat API error:', data);\n        return {\n          success: false,\n          message: 'Failed to retrieve user from Freshchat',\n          error_details: {\n            status: response.status,\n            statusText: response.statusText,\n            data\n          }\n        };\n      }\n\n      return {\n        success: true,\n        message: 'User retrieved successfully',\n        user_data: data\n      };\n\n    } catch (error) {\n      console.error('Error retrieving Freshchat user:', error);\n      return {\n        success: false,\n        message: 'Internal error while retrieving user',\n        error_details: {\n          error: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n\n  /**\n   * Update user properties\n   */\n  async updateUserProperties(userId: string, properties: IFreshchatProperty[]): Promise<IFreshchatUserResponse> {\n    try {\n      if (!userId) {\n        return {\n          success: false,\n          message: 'userId is required'\n        };\n      }\n\n      const response = await fetch(`${this.baseURL}/users/${userId}`, {\n        method: 'PUT',\n        headers: this.getHeaders(),\n        body: JSON.stringify({ properties })\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        console.error('Freshchat API error:', data);\n        return {\n          success: false,\n          message: 'Failed to update user properties in Freshchat',\n          error_details: {\n            status: response.status,\n            statusText: response.statusText,\n            data\n          }\n        };\n      }\n\n      return {\n        success: true,\n        message: 'User properties updated successfully',\n        user_data: data\n      };\n\n    } catch (error) {\n      console.error('Error updating Freshchat user properties:', error);\n      return {\n        success: false,\n        message: 'Internal error while updating user properties',\n        error_details: {\n          error: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n\n  /**\n   * Send message to a conversation\n   */\n  async sendMessage(\n    conversationId: string, \n    messageRequest: IFreshchatSendMessageRequest,\n    assumeIdentity: boolean = false\n  ): Promise<IFreshchatSendMessageResponse> {\n    try {\n      // Validate required fields\n      if (!conversationId) {\n        return {\n          success: false,\n          message: 'conversationId is required'\n        };\n      }\n\n      if (!messageRequest.message_parts || messageRequest.message_parts.length === 0) {\n        return {\n          success: false,\n          message: 'message_parts is required and cannot be empty'\n        };\n      }\n\n      if (!messageRequest.user_id || !messageRequest.actor_id) {\n        return {\n          success: false,\n          message: 'user_id and actor_id are required'\n        };\n      }\n\n      // Make API call to send message\n      const response = await fetch(`${this.baseURL}/conversations/${conversationId}/messages`, {\n        method: 'POST',\n        headers: this.getHeaders(assumeIdentity),\n        body: JSON.stringify(messageRequest)\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        console.error('Freshchat send message API error:', data);\n        return {\n          success: false,\n          message: 'Failed to send message to Freshchat conversation',\n          error_details: {\n            status: response.status,\n            statusText: response.statusText,\n            data\n          }\n        };\n      }\n\n      return {\n        success: true,\n        message_id: data.id || data.message_id,\n        message: 'Message sent successfully to Freshchat conversation',\n        message_data: data\n      };\n\n    } catch (error) {\n      console.error('Error sending message to Freshchat:', error);\n      return {\n        success: false,\n        message: 'Internal error while sending message',\n        error_details: {\n          error: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n\n  /**\n   * Send a simple text message to a conversation\n   */\n  async sendTextMessage(\n    conversationId: string,\n    content: string,\n    userId: string,\n    actorId: string,\n    actorType: 'agent' | 'user' | 'system' = 'agent',\n    assumeIdentity: boolean = false\n  ): Promise<IFreshchatSendMessageResponse> {\n    const messageRequest: IFreshchatSendMessageRequest = {\n      message_parts: [\n        {\n          text: {\n            content: content\n          }\n        }\n      ],\n      message_type: 'normal',\n      actor_type: actorType,\n      user_id: userId,\n      actor_id: actorId\n    };\n\n    return this.sendMessage(conversationId, messageRequest, assumeIdentity);\n  }\n\n  /**\n   * Send a message with quick reply buttons\n   */\n  async sendMessageWithQuickReplies(\n    conversationId: string,\n    content: string,\n    quickReplies: string[],\n    userId: string,\n    actorId: string,\n    actorType: 'agent' | 'user' | 'system' = 'agent',\n    assumeIdentity: boolean = false\n  ): Promise<IFreshchatSendMessageResponse> {\n    const messageRequest: IFreshchatSendMessageRequest = {\n      message_parts: [\n        {\n          text: {\n            content: content\n          }\n        }\n      ],\n      reply_parts: [\n        {\n          collection: {\n            sub_parts: quickReplies.map(label => ({\n              quick_reply_button: {\n                label: label\n              }\n            }))\n          }\n        }\n      ],\n      message_type: 'normal',\n      actor_type: actorType,\n      user_id: userId,\n      actor_id: actorId\n    };\n\n    return this.sendMessage(conversationId, messageRequest, assumeIdentity);\n  }\n\n  /**\n   * Send a message with URL buttons\n   */\n  async sendMessageWithUrlButtons(\n    conversationId: string,\n    content: string,\n    urlButtons: Array<{ url: string; label: string; target?: '_blank' | '_self' }>,\n    userId: string,\n    actorId: string,\n    actorType: 'agent' | 'user' | 'system' = 'agent',\n    assumeIdentity: boolean = false\n  ): Promise<IFreshchatSendMessageResponse> {\n    const messageRequest: IFreshchatSendMessageRequest = {\n      message_parts: [\n        {\n          text: {\n            content: content\n          }\n        }\n      ],\n      reply_parts: [\n        {\n          collection: {\n            sub_parts: urlButtons.map(button => ({\n              url_button: {\n                url: button.url,\n                label: button.label,\n                target: button.target || '_blank'\n              }\n            }))\n          }\n        }\n      ],\n      message_type: 'normal',\n      actor_type: actorType,\n      user_id: userId,\n      actor_id: actorId\n    };\n\n    return this.sendMessage(conversationId, messageRequest, assumeIdentity);\n  }\n\n  /**\n   * Send a message with mixed buttons (quick replies and URL buttons)\n   */\n  async sendMessageWithMixedButtons(\n    conversationId: string,\n    content: string,\n    quickReplies: string[],\n    urlButtons: Array<{ url: string; label: string; target?: '_blank' | '_self' }>,\n    userId: string,\n    actorId: string,\n    actorType: 'agent' | 'user' | 'system' = 'agent',\n    assumeIdentity: boolean = false\n  ): Promise<IFreshchatSendMessageResponse> {\n    const subParts: any[] = [\n      // Add quick reply buttons\n      ...quickReplies.map(label => ({\n        quick_reply_button: {\n          label: label\n        }\n      })),\n      // Add URL buttons\n      ...urlButtons.map(button => ({\n        url_button: {\n          url: button.url,\n          label: button.label,\n          target: button.target || '_blank'\n        }\n      }))\n    ];\n\n    const messageRequest: IFreshchatSendMessageRequest = {\n      message_parts: [\n        {\n          text: {\n            content: content\n          }\n        }\n      ],\n      reply_parts: [\n        {\n          collection: {\n            sub_parts: subParts\n          }\n        }\n      ],\n      message_type: 'normal',\n      actor_type: actorType,\n      user_id: userId,\n      actor_id: actorId\n    };\n\n    return this.sendMessage(conversationId, messageRequest, assumeIdentity);\n  }\n\n  /**\n   * Get conversation details by ID\n   */\n  async getConversation(conversationId: string): Promise<IFreshchatGetConversationResponse> {\n    try {\n      if (!conversationId) {\n        return {\n          success: false,\n          message: 'conversationId is required'\n        };\n      }\n\n      // Make API call to get conversation\n      const response = await fetch(`${this.baseURL}/conversations/${conversationId}`, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        console.error('Freshchat get conversation API error:', data);\n        return {\n          success: false,\n          message: 'Failed to retrieve conversation from Freshchat',\n          error_details: {\n            status: response.status,\n            statusText: response.statusText,\n            data\n          }\n        };\n      }\n\n      return {\n        success: true,\n        message: 'Conversation retrieved successfully',\n        conversation_data: data\n      };\n\n    } catch (error) {\n      console.error('Error retrieving Freshchat conversation:', error);\n      return {\n        success: false,\n        message: 'Internal error while retrieving conversation',\n        error_details: {\n          error: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n}\n\n// Default instance\nexport const freshchatAPI = new FreshchatAPI();\n\n// Individual functions for easier imports\nexport const createFreshchatUser = (userRequest: IFreshchatUserRequest) => \n  freshchatAPI.createUser(userRequest);\n\nexport const getFreshchatUserByReferenceId = (referenceId: string) => \n  freshchatAPI.getUserByReferenceId(referenceId);\n\nexport const getFreshchatUserById = (userId: string) => \n  freshchatAPI.getUserById(userId);\n\nexport const updateFreshchatUserProperties = (userId: string, properties: IFreshchatProperty[]) => \n  freshchatAPI.updateUserProperties(userId, properties);\n\n// Message functions\nexport const sendFreshchatMessage = (\n  conversationId: string, \n  messageRequest: IFreshchatSendMessageRequest,\n  assumeIdentity?: boolean\n) => freshchatAPI.sendMessage(conversationId, messageRequest, assumeIdentity);\n\nexport const sendFreshchatTextMessage = (\n  conversationId: string,\n  content: string,  \n  userId: string,\n  actorId: string,\n  actorType?: 'agent' | 'user' | 'system',\n  assumeIdentity?: boolean\n) => freshchatAPI.sendTextMessage(conversationId, content, userId, actorId, actorType, assumeIdentity);\n\nexport const sendFreshchatMessageWithQuickReplies = (\n  conversationId: string,\n  content: string,\n  quickReplies: string[],\n  userId: string,\n  actorId: string,\n  actorType?: 'agent' | 'user' | 'system',\n  assumeIdentity?: boolean\n) => freshchatAPI.sendMessageWithQuickReplies(conversationId, content, quickReplies, userId, actorId, actorType, assumeIdentity);\n\nexport const sendFreshchatMessageWithUrlButtons = (\n  conversationId: string,\n  content: string,\n  urlButtons: Array<{ url: string; label: string; target?: '_blank' | '_self' }>,\n  userId: string,\n  actorId: string,\n  actorType?: 'agent' | 'user' | 'system',\n  assumeIdentity?: boolean\n) => freshchatAPI.sendMessageWithUrlButtons(conversationId, content, urlButtons, userId, actorId, actorType, assumeIdentity);\n\nexport const sendFreshchatMessageWithMixedButtons = (\n  conversationId: string,\n  content: string,\n  quickReplies: string[],\n  urlButtons: Array<{ url: string; label: string; target?: '_blank' | '_self' }>,\n  userId: string,\n  actorId: string,\n  actorType?: 'agent' | 'user' | 'system',\n  assumeIdentity?: boolean\n) => freshchatAPI.sendMessageWithMixedButtons(conversationId, content, quickReplies, urlButtons, userId, actorId, actorType, assumeIdentity);\n\n// Conversation functions\nexport const getFreshchatConversation = (conversationId: string) => \n  freshchatAPI.getConversation(conversationId);\n\n/**\n * LocalStorage Management Functions\n */\n\n/**\n * Get stored Freshchat user data by reference ID\n */\nexport const getStoredFreshchatUser = (referenceId: string) => {\n  if (typeof window === 'undefined') return null;\n  \n  try {\n    const userStorageKey = `freshchat_user_${referenceId}`;\n    const storedData = localStorage.getItem(userStorageKey);\n    \n    if (storedData) {\n      return JSON.parse(storedData);\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Error retrieving stored Freshchat user:', error);\n    return null;\n  }\n};\n\n/**\n * Get the last created Freshchat user ID\n */\nexport const getLastCreatedFreshchatUserId = (): string | null => {\n  if (typeof window === 'undefined') return null;\n  \n  try {\n    return localStorage.getItem('freshchat_last_created_user');\n  } catch (error) {\n    console.error('Error retrieving last created user ID:', error);\n    return null;\n  }\n};\n\n/**\n * Get all stored Freshchat users\n */\nexport const getAllStoredFreshchatUsers = () => {\n  if (typeof window === 'undefined') return [];\n  \n  try {\n    const users = [];\n    const keys = Object.keys(localStorage);\n    \n    for (const key of keys) {\n      if (key.startsWith('freshchat_user_')) {\n        const userData = localStorage.getItem(key);\n        if (userData) {\n          users.push(JSON.parse(userData));\n        }\n      }\n    }\n    \n    return users;\n  } catch (error) {\n    console.error('Error retrieving all stored users:', error);\n    return [];\n  }\n};\n\n/**\n * Remove stored Freshchat user data\n */\nexport const removeStoredFreshchatUser = (referenceId: string): boolean => {\n  if (typeof window === 'undefined') return false;\n  \n  try {\n    const userStorageKey = `freshchat_user_${referenceId}`;\n    localStorage.removeItem(userStorageKey);\n    \n    console.log(`🗑️ Removed stored Freshchat user: ${referenceId}`);\n    return true;\n  } catch (error) {\n    console.error('Error removing stored user:', error);\n    return false;\n  }\n};\n\n/**\n * Clear all stored Freshchat user data\n */\nexport const clearAllStoredFreshchatUsers = (): boolean => {\n  if (typeof window === 'undefined') return false;\n  \n  try {\n    const keys = Object.keys(localStorage);\n    let removedCount = 0;\n    \n    for (const key of keys) {\n      if (key.startsWith('freshchat_user_') || key === 'freshchat_last_created_user') {\n        localStorage.removeItem(key);\n        removedCount++;\n      }\n    }\n    \n    console.log(`🗑️ Cleared ${removedCount} stored Freshchat users`);\n    return true;\n  } catch (error) {\n    console.error('Error clearing stored users:', error);\n    return false;\n  }\n};\n\n/**\n * Check if user exists in localStorage\n */\nexport const isUserStoredLocally = (referenceId: string): boolean => {\n  if (typeof window === 'undefined') return false;\n  \n  const userStorageKey = `freshchat_user_${referenceId}`;\n  return localStorage.getItem(userStorageKey) !== null;\n};","/**\n * Chat API Integration\n * Handles AI chat with automatic handoff to Freshchat when needed\n * Manages conversation state and routing between AI and human agents\n */\n\nimport {\n  IChatRequest,\n  IChatResponse,\n  IConversationMapping\n} from './types';\n\nimport { \n  sendFreshchatMessage,\n  getFreshchatConversation \n} from './freshchat';\n\n/**\n * Chat API Client Class\n */\nexport class ChatAPI {\n  private baseURL: string;\n\n  constructor(baseURL: string = '') {\n    // Base URL will be determined dynamically or from environment\n    this.baseURL = baseURL;\n  }\n\n  /**\n   * Get headers for chat API requests with optional auth_token\n   */\n  private getHeaders(authToken?: string): HeadersInit {\n    const headers: HeadersInit = {\n      'accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n    \n    // Only add Authorization header if auth token is provided\n    if (authToken) {\n      headers['Authorization'] = `Bearer ${authToken}`;\n    }\n    \n    return headers;\n  }\n\n  /**\n   * Send a chat message - handles both AI chat and Freshchat handoff\n   */\n  async sendMessage(\n    chatRequest: IChatRequest,\n    apiBaseURL?: string\n  ): Promise<IChatResponse | { success: false; message: string; error_details?: any }> {\n    try {\n      // Check if conversation is already handed off to human\n      const conversationState = this.getConversationState(chatRequest.session_id);\n      \n      if (conversationState?.handoff_to_human) {\n        // Route to Freshchat if already handed off to human\n        return await this.handleFreshchatMessage(chatRequest, conversationState);\n      }\n\n      // Use provided API base URL or construct from current location\n      const baseUrl = apiBaseURL || this.getApiBaseURL();\n      \n      // Validate required fields\n      if (!chatRequest.message) {\n        return {\n          success: false,\n          message: 'Missing required field: message'\n        };\n      }\n\n      if (!chatRequest.user_id) {\n        return {\n          success: false,\n          message: 'Missing required field: user_id'\n        };\n      }\n\n      if (!chatRequest.session_id) {\n        return {\n          success: false,\n          message: 'Missing required field: session_id'\n        };\n      }\n\n      // Auth token is now optional for development/demo purposes\n      if (!chatRequest.auth_token) {\n        console.warn('⚠️ No auth_token provided - using demo mode');\n        chatRequest.auth_token = 'demo_token';\n      }\n\n      // Make API call to chat endpoint\n      const response = await fetch(`${baseUrl}/api/v1/chat`, {\n        method: 'POST',\n        headers: this.getHeaders(chatRequest.auth_token),\n        body: JSON.stringify({\n          message: chatRequest.message,\n          user_id: chatRequest.user_id,\n          session_id: chatRequest.session_id,\n          stream: chatRequest.stream || false,\n          auth_token: chatRequest.auth_token,\n          metadata: chatRequest.metadata || {}\n        })\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        console.error('Chat API error:', data);\n        return {\n          success: false,\n          message: 'Failed to send chat message',\n          error_details: {\n            status: response.status,\n            statusText: response.statusText,\n            data\n          }\n        };\n      }\n\n      // Store conversation mapping and check for handoff\n      await this.handleChatResponse(data);\n\n      return data;\n\n    } catch (error) {\n      console.error('Error sending chat message:', error);\n      return {\n        success: false,\n        message: 'Internal error while sending chat message',\n        error_details: {\n          error: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n\n  /**\n   * Handle chat response - store conversation mapping and check handoff status\n   */\n  private async handleChatResponse(chatResponse: IChatResponse): Promise<void> {\n    try {\n      // Extract conversation details\n      const freshchatConversationId = chatResponse.metadata?.freshchat_conversation_id;\n      const handoffToHuman = chatResponse.handoff_to_human;\n\n      if (freshchatConversationId) {\n        // Store or update conversation mapping\n        const conversationMapping: IConversationMapping = {\n          session_id: chatResponse.session_id,\n          conversation_id: chatResponse.conversation_id,\n          freshchat_conversation_id: freshchatConversationId,\n          user_id: chatResponse.user_id,\n          handoff_to_human: handoffToHuman,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          last_message_timestamp: chatResponse.timestamp\n        };\n\n        this.storeConversationMapping(conversationMapping);\n\n        console.log(`📞 Conversation mapping stored:`, {\n          session_id: chatResponse.session_id,\n          conversation_id: chatResponse.conversation_id,\n          freshchat_conversation_id: freshchatConversationId,\n          handoff_to_human: handoffToHuman\n        });\n\n        // If handoff to human is true, log the transition\n        if (handoffToHuman) {\n          console.log(`🤝 Conversation ${chatResponse.conversation_id} handed off to human agent`);\n          console.log(`   - Freshchat Conversation ID: ${freshchatConversationId}`);\n          console.log(`   - Future messages will route to Freshchat`);\n        }\n      }\n    } catch (error) {\n      console.error('Error handling chat response:', error);\n    }\n  }\n\n  /**\n   * Handle message routing to Freshchat when handed off to human\n   */\n  private async handleFreshchatMessage(\n    chatRequest: IChatRequest,\n    conversationState: IConversationMapping\n  ): Promise<IChatResponse | { success: false; message: string; error_details?: any }> {\n    try {\n      console.log(`🤝 Routing message to Freshchat for conversation ${conversationState.conversation_id}`);\n\n      // Get the user's Freshchat user ID (assuming it's stored or can be retrieved)\n      const freshchatUserId = this.getFreshchatUserIdForSession(chatRequest.session_id);\n      \n      if (!freshchatUserId) {\n        return {\n          success: false,\n          message: 'No Freshchat user ID found for this session',\n          error_details: { session_id: chatRequest.session_id }\n        };\n      }\n\n      // Send message to Freshchat\n      const freshchatResponse = await sendFreshchatMessage(\n        conversationState.freshchat_conversation_id,\n        chatRequest.message,\n        freshchatUserId,\n        chatRequest.auth_token // Use auth_token as actor_id for now\n      );\n\n      if (freshchatResponse.success) {\n        // Get the updated conversation from Freshchat to get the response\n        const conversationData = await getFreshchatConversation(\n          conversationState.freshchat_conversation_id\n        );\n\n        if (conversationData.success && conversationData.conversation_data) {\n          // Extract the latest message from the conversation\n          const messages = conversationData.conversation_data.messages || [];\n          const latestMessage = messages[messages.length - 1];\n          const responseText = latestMessage?.message_parts?.[0]?.text?.content || 'Message sent to human agent';\n\n          // Construct a chat response that matches the expected format\n          const mockChatResponse: IChatResponse = {\n            response: responseText,\n            display_items: {},\n            handoff_to_human: true,\n            session_id: chatRequest.session_id,\n            conversation_id: conversationState.conversation_id,\n            user_id: chatRequest.user_id,\n            billing_session_count: 1,\n            is_new_session: false,\n            timestamp: new Date().toISOString(),\n            metadata: {\n              freshchat_conversation_id: conversationState.freshchat_conversation_id,\n              agent_state: {\n                messages: [],\n                user_id: chatRequest.user_id,\n                session_id: chatRequest.session_id,\n                auth_token: chatRequest.auth_token,\n                conversation_id: conversationState.conversation_id,\n                conversation_context: {\n                  conversation_id: conversationState.conversation_id,\n                  session_data: {\n                    session_id: chatRequest.session_id,\n                    user_id: chatRequest.user_id,\n                    user_name: '',\n                    user_email: '',\n                    status: 'active',\n                    billing_session_count: 1,\n                    expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n                    created_at: conversationState.created_at,\n                    updated_at: new Date().toISOString(),\n                    metadata: {\n                      auth_token: chatRequest.auth_token\n                    }\n                  },\n                  freshchat_conversation_id: conversationState.freshchat_conversation_id,\n                  last_response_timestamp: new Date().toISOString(),\n                  model_used: 'human_agent'\n                },\n                display_items: {},\n                handoff_to_human: true\n              }\n            }\n          };\n\n          return mockChatResponse;\n        }\n      }\n\n      return {\n        success: false,\n        message: 'Failed to send message via Freshchat',\n        error_details: freshchatResponse\n      };\n\n    } catch (error) {\n      console.error('Error handling Freshchat message:', error);\n      return {\n        success: false,\n        message: 'Error routing message to human agent',\n        error_details: {\n          error: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n\n  /**\n   * Send a simplified chat message\n   */\n  async sendSimpleMessage(\n    message: string,\n    userId: string,\n    sessionId: string,\n    authToken: string,\n    metadata?: { [key: string]: any },\n    stream?: boolean,\n    apiBaseURL?: string\n  ): Promise<IChatResponse | { success: false; message: string; error_details?: any }> {\n    const chatRequest: IChatRequest = {\n      message,\n      user_id: userId,\n      session_id: sessionId,\n      stream: stream || false,\n      auth_token: authToken,\n      metadata: metadata || {}\n    };\n\n    return this.sendMessage(chatRequest, apiBaseURL);\n  }\n\n  /**\n   * Get API base URL for services API (different from local origin)\n   */\n  private getApiBaseURL(): string {\n    // Services API is running on a different server\n    return process.env.NEXT_PUBLIC_SERVICES_API_URL || 'http://192.168.50.19:8000';\n  }\n\n  /**\n   * Store conversation mapping in localStorage\n   */\n  private storeConversationMapping(mapping: IConversationMapping): void {\n    if (typeof window === 'undefined') return;\n\n    try {\n      const mappingKey = `conversation_mapping_${mapping.session_id}`;\n      localStorage.setItem(mappingKey, JSON.stringify(mapping));\n\n      // Also store by conversation_id for quick lookup\n      const conversationKey = `conversation_${mapping.conversation_id}`;\n      localStorage.setItem(conversationKey, JSON.stringify(mapping));\n\n      // Store freshchat conversation mapping\n      const freshchatKey = `freshchat_conversation_${mapping.freshchat_conversation_id}`;\n      localStorage.setItem(freshchatKey, JSON.stringify(mapping));\n\n    } catch (error) {\n      console.error('Error storing conversation mapping:', error);\n    }\n  }\n\n  /**\n   * Get conversation state from localStorage\n   */\n  private getConversationState(sessionId: string): IConversationMapping | null {\n    if (typeof window === 'undefined') return null;\n\n    try {\n      const mappingKey = `conversation_mapping_${sessionId}`;\n      const storedData = localStorage.getItem(mappingKey);\n\n      if (storedData) {\n        return JSON.parse(storedData);\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Error retrieving conversation state:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get Freshchat user ID for a session (placeholder - implement based on your storage strategy)\n   */\n  private getFreshchatUserIdForSession(sessionId: string): string | null {\n    if (typeof window === 'undefined') return null;\n\n    try {\n      // Try to get from session mapping or user data\n      // This is a placeholder - you may need to implement based on how you store user data\n      const sessionData = localStorage.getItem(`session_mapping_${sessionId}`);\n      if (sessionData) {\n        const userId = JSON.parse(sessionData);\n        \n        // Try to get freshchat user ID from internal user data\n        const userIds = this.getUserIdsByUserId(userId);\n        return userIds.freshchat_user_id;\n      }\n\n      // Fallback: try to get the last created freshchat user ID\n      return localStorage.getItem('internal_last_created_freshchat_user') || \n             localStorage.getItem('last_created_freshchat_user');\n\n    } catch (error) {\n      console.error('Error getting Freshchat user ID for session:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Helper to get user IDs by user ID (placeholder - implement based on your storage)\n   */\n  private getUserIdsByUserId(userId: string): { user_id: string | null, freshchat_user_id: string | null } {\n    if (typeof window === 'undefined') return { user_id: null, freshchat_user_id: null };\n\n    try {\n      // Check user-freshchat mapping\n      const mappingKey = `user_freshchat_mapping_${userId}`;\n      const freshchatUserId = localStorage.getItem(mappingKey);\n\n      return {\n        user_id: userId,\n        freshchat_user_id: freshchatUserId\n      };\n    } catch (error) {\n      console.error('Error getting user IDs:', error);\n      return { user_id: null, freshchat_user_id: null };\n    }\n  }\n}\n\n// Default instance\nexport const chatAPI = new ChatAPI();\n\n// Individual functions for easier imports\nexport const sendChatMessage = (\n  chatRequest: IChatRequest,\n  apiBaseURL?: string\n) => chatAPI.sendMessage(chatRequest, apiBaseURL);\n\nexport const sendSimpleChatMessage = (\n  message: string,\n  userId: string,\n  sessionId: string,\n  authToken: string,\n  metadata?: { [key: string]: any },\n  stream?: boolean,\n  apiBaseURL?: string\n) => chatAPI.sendSimpleMessage(message, userId, sessionId, authToken, metadata, stream, apiBaseURL);\n\n/**\n * LocalStorage Management Functions for Conversations\n */\n\n/**\n * Get conversation mapping by session ID\n */\nexport const getConversationMapping = (sessionId: string): IConversationMapping | null => {\n  if (typeof window === 'undefined') return null;\n\n  try {\n    const mappingKey = `conversation_mapping_${sessionId}`;\n    const storedData = localStorage.getItem(mappingKey);\n\n    if (storedData) {\n      return JSON.parse(storedData);\n    }\n\n    return null;\n  } catch (error) {\n    console.error('Error retrieving conversation mapping:', error);\n    return null;\n  }\n};\n\n/**\n * Get conversation mapping by conversation ID\n */\nexport const getConversationMappingByConversationId = (conversationId: string): IConversationMapping | null => {\n  if (typeof window === 'undefined') return null;\n\n  try {\n    const conversationKey = `conversation_${conversationId}`;\n    const storedData = localStorage.getItem(conversationKey);\n\n    if (storedData) {\n      return JSON.parse(storedData);\n    }\n\n    return null;\n  } catch (error) {\n    console.error('Error retrieving conversation mapping by conversation ID:', error);\n    return null;\n  }\n};\n\n/**\n * Get conversation mapping by Freshchat conversation ID\n */\nexport const getConversationMappingByFreshchatId = (freshchatConversationId: string): IConversationMapping | null => {\n  if (typeof window === 'undefined') return null;\n\n  try {\n    const freshchatKey = `freshchat_conversation_${freshchatConversationId}`;\n    const storedData = localStorage.getItem(freshchatKey);\n\n    if (storedData) {\n      return JSON.parse(storedData);\n    }\n\n    return null;\n  } catch (error) {\n    console.error('Error retrieving conversation mapping by Freshchat ID:', error);\n    return null;\n  }\n};\n\n/**\n * Get all conversation mappings\n */\nexport const getAllConversationMappings = (): IConversationMapping[] => {\n  if (typeof window === 'undefined') return [];\n\n  try {\n    const mappings = [];\n    const keys = Object.keys(localStorage);\n\n    for (const key of keys) {\n      if (key.startsWith('conversation_mapping_')) {\n        const mappingData = localStorage.getItem(key);\n        if (mappingData) {\n          mappings.push(JSON.parse(mappingData));\n        }\n      }\n    }\n\n    return mappings;\n  } catch (error) {\n    console.error('Error retrieving all conversation mappings:', error);\n    return [];\n  }\n};\n\n/**\n * Check if conversation is handed off to human\n */\nexport const isConversationHandedOffToHuman = (sessionId: string): boolean => {\n  const mapping = getConversationMapping(sessionId);\n  return mapping?.handoff_to_human || false;\n};\n\n/**\n * Clear conversation mapping\n */\nexport const clearConversationMapping = (sessionId: string): boolean => {\n  if (typeof window === 'undefined') return false;\n\n  try {\n    const mapping = getConversationMapping(sessionId);\n    if (mapping) {\n      // Remove all related mappings\n      localStorage.removeItem(`conversation_mapping_${sessionId}`);\n      localStorage.removeItem(`conversation_${mapping.conversation_id}`);\n      localStorage.removeItem(`freshchat_conversation_${mapping.freshchat_conversation_id}`);\n\n      console.log(`🗑️ Cleared conversation mapping for session: ${sessionId}`);\n      return true;\n    }\n\n    return false;\n  } catch (error) {\n    console.error('Error clearing conversation mapping:', error);\n    return false;\n  }\n};\n\n/**\n * Clear all conversation mappings\n */\nexport const clearAllConversationMappings = (): boolean => {\n  if (typeof window === 'undefined') return false;\n\n  try {\n    const keys = Object.keys(localStorage);\n    let removedCount = 0;\n\n    for (const key of keys) {\n      if (key.startsWith('conversation_mapping_') || \n          key.startsWith('conversation_') || \n          key.startsWith('freshchat_conversation_')) {\n        localStorage.removeItem(key);\n        removedCount++;\n      }\n    }\n\n    console.log(`🗑️ Cleared ${removedCount} conversation mappings`);\n    return true;\n  } catch (error) {\n    console.error('Error clearing all conversation mappings:', error);\n    return false;\n  }\n};","/**\n * Complete Authentication Flow\n * Handles the complete flow: Login → Create User → Create Session → Storage\n * \n * Flow:\n * 1. Login with jewelerid, username, password\n * 2. Extract host_auth_token and other tokens\n * 3. Create user via internal API using host_auth_token\n * 4. Create session using user_id and auth_token\n * 5. Store all authentication data in localStorage\n */\n\nimport {\n  ILoginFormData,\n  IUserDetailsFormData,\n  ICompleteLoginFormData,\n  ICompleteAuthFlow,\n  ICompleteAuthData,\n  IHostTokens,\n  ILoginResponse,\n  IAuthenticationState,\n  IStoredAuthCredentials\n} from './types';\n\nimport { createInternalUser } from './internal-user';\nimport { createSession } from './session';\n\n/**\n * Complete Authentication Flow API Class\n */\nexport class AuthFlowAPI {\n  private baseURL: string;\n\n  constructor(baseURL: string = '') {\n    this.baseURL = baseURL;\n  }\n\n  /**\n   * Get API base URL from current location or environment\n   */\n  private getApiBaseURL(): string {\n    if (typeof window !== 'undefined') {\n      return window.location.origin;\n    } else {\n      return process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000';\n    }\n  }\n\n  /**\n   * Get Services API base URL for authentication and user APIs\n   */\n  private getServicesApiBaseURL(): string {\n    return process.env.NEXT_PUBLIC_SERVICES_API_URL || 'http://192.168.50.19:8000';\n  }\n\n  /**\n   * Step 1: Perform actual login via API and extract tokens\n   * This calls the real login API and then extracts tokens from the host website\n   */\n  private async performLogin(\n    loginData: ILoginFormData,\n    apiBaseURL?: string\n  ): Promise<ILoginResponse> {\n    try {\n      console.log('🔐 Performing actual login API call...', {\n        jewelerid: loginData.jewelerid,\n        userName: loginData.userName\n      });\n\n      // Step 1a: Skip actual login API due to CORS issues - simulate successful login\n      console.log('⚠️ Skipping external login API due to CORS restrictions');\n      console.log('🔄 Simulating successful login for development...');\n      \n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Mock successful login result\n      const loginResult = {\n        success: true,\n        auth_token: `mock_auth_token_${Date.now()}`,\n        user: {\n          jewelerid: loginData.jewelerid,\n          username: loginData.userName,\n          email: loginData.userName\n        },\n        message: 'Login successful (simulated)'\n      };\n\n      console.log('✅ Simulated login successful:', {\n        hasToken: !!loginResult.auth_token,\n        hasUserInfo: !!loginResult.user\n      });\n\n      // Step 1b: Use hardcoded host token for development\n      const hostTokens: IHostTokens = {\n        host_auth_token: 'hardcoded_dev_token_12345_abcdef',\n        api_key: this.extractAPIKey(),\n        session_token: this.extractSessionToken(),\n        refresh_token: this.extractRefreshToken()\n      };\n\n      // Validate that we have the essential host_auth_token\n      if (!hostTokens.host_auth_token) {\n        return {\n          success: false,\n          message: 'Failed to get auth token from login API or website',\n          error_details: {\n            reason: 'auth_token_missing',\n            login_response: loginResult,\n            available_tokens: Object.keys(hostTokens).filter(k => hostTokens[k])\n          }\n        };\n      }\n\n      console.log('✅ Login successful and tokens extracted');\n\n      return {\n        success: true,\n        message: 'Login and token extraction successful',\n        data: {\n          host_tokens: hostTokens,\n          auth_token: hostTokens.host_auth_token,\n          user_info: {\n            jewelerid: loginData.jewelerid,\n            userName: loginData.userName,\n            email: loginData.userName, // userName is email\n            permissions: ['chat', 'user_management']\n          },\n          login_api_response: loginResult\n        }\n      };\n\n    } catch (error) {\n      console.error('Login/token extraction error:', error);\n      return {\n        success: false,\n        message: 'Internal error during login/token extraction',\n        error_details: {\n          error: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n\n  /**\n   * Extract host_auth_token from the host website\n   * This should be implemented based on how you extract tokens from the parent website\n   */\n  private extractHostAuthToken(): string | null {\n    if (typeof window === 'undefined') return null;\n\n    try {\n      // Method 1: Try to get from localStorage of host website\n      const hostToken = localStorage.getItem('host_auth_token') || \n                       localStorage.getItem('auth_token') ||\n                       localStorage.getItem('access_token');\n      \n      if (hostToken) {\n        console.log('🔑 Found host_auth_token in localStorage');\n        return hostToken;\n      }\n\n      // Method 2: Try to get from sessionStorage\n      const sessionToken = sessionStorage.getItem('host_auth_token') ||\n                           sessionStorage.getItem('auth_token') ||\n                           sessionStorage.getItem('access_token');\n      \n      if (sessionToken) {\n        console.log('🔑 Found host_auth_token in sessionStorage');\n        return sessionToken;\n      }\n\n      // Method 3: Try to get from cookies\n      const cookieToken = this.getTokenFromCookies();\n      if (cookieToken) {\n        console.log('🔑 Found host_auth_token in cookies');\n        return cookieToken;\n      }\n\n      // Method 4: Try to get from parent window (if in iframe)\n      if (window.parent && window.parent !== window) {\n        try {\n          const parentToken = window.parent.localStorage?.getItem('host_auth_token');\n          if (parentToken) {\n            console.log('🔑 Found host_auth_token in parent window');\n            return parentToken;\n          }\n        } catch (e) {\n          // Cross-origin restriction, ignore\n        }\n      }\n\n      // Method 5: Generate a default token for development\n      console.warn('⚠️ No host_auth_token found, generating default for development');\n      return `dev_host_token_${Date.now()}`;\n\n    } catch (error) {\n      console.error('Error extracting host_auth_token:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Extract API key from host website\n   */\n  private extractAPIKey(): string | undefined {\n    if (typeof window === 'undefined') return undefined;\n\n    return localStorage.getItem('api_key') || \n           sessionStorage.getItem('api_key') ||\n           undefined;\n  }\n\n  /**\n   * Extract session token from host website\n   */\n  private extractSessionToken(): string | undefined {\n    if (typeof window === 'undefined') return undefined;\n\n    return localStorage.getItem('session_token') ||\n           sessionStorage.getItem('session_token') ||\n           undefined;\n  }\n\n  /**\n   * Extract refresh token from host website\n   */\n  private extractRefreshToken(): string | undefined {\n    if (typeof window === 'undefined') return undefined;\n\n    return localStorage.getItem('refresh_token') ||\n           sessionStorage.getItem('refresh_token') ||\n           undefined;\n  }\n\n  /**\n   * Get token from cookies\n   */\n  private getTokenFromCookies(): string | null {\n    if (typeof document === 'undefined') return null;\n\n    try {\n      const cookies = document.cookie.split(';');\n      \n      for (const cookie of cookies) {\n        const [name, value] = cookie.trim().split('=');\n        \n        if (name === 'host_auth_token' || \n            name === 'auth_token' || \n            name === 'access_token') {\n          return decodeURIComponent(value);\n        }\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Error reading cookies:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Complete Authentication Flow with User Details\n   * Performs login → create user → create session → store data\n   */\n  async completeAuthenticationFlowWithDetails(\n    userDetailsData: IUserDetailsFormData,\n    apiBaseURL?: string\n  ): Promise<ICompleteAuthFlow> {\n    console.log('🔐 Starting complete authentication flow with user details...', {\n      jewelerid: userDetailsData.jewelerid,\n      userName: userDetailsData.userName,\n      email: userDetailsData.email,\n      first_name: userDetailsData.first_name,\n      last_name: userDetailsData.last_name\n    });\n\n    try {\n      // Step 1: Login and get host tokens\n      console.log('Step 1: Performing login and token extraction...');\n      const loginResponse = await this.performLogin({\n        jewelerid: userDetailsData.jewelerid,\n        userName: userDetailsData.userName,\n        password: userDetailsData.password\n      }, apiBaseURL);\n      \n      if (!loginResponse.success || !loginResponse.data?.host_tokens?.host_auth_token) {\n        console.error('❌ Login failed:', loginResponse.message);\n        return {\n          step: 'login',\n          success: false,\n          message: `Login failed: ${loginResponse.message}`,\n          error_details: loginResponse.error_details\n        };\n      }\n\n      const hostAuthToken = loginResponse.data.host_tokens.host_auth_token;\n      console.log('✅ Login successful, host_auth_token obtained');\n\n      // Step 2: Create user via internal API with proper user details\n      console.log('Step 2: Creating user via internal API with user details...');\n      \n      // Generate reference_id if not provided (firstname@lastname)\n      const referenceId = userDetailsData.reference_id || \n                         `${userDetailsData.first_name.toLowerCase()}@${userDetailsData.last_name.toLowerCase()}`;\n      \n      console.log('👤 User details for creation:', {\n        email: userDetailsData.email,\n        first_name: userDetailsData.first_name,\n        last_name: userDetailsData.last_name,\n        phone: userDetailsData.phone,\n        reference_id: referenceId,\n        org_id: userDetailsData.jewelerid\n      });\n\n      const userResponse = await createInternalUser(\n        {\n          user_email: userDetailsData.email,\n          org_id: userDetailsData.jewelerid,\n          user_name: userDetailsData.userName,\n          first_name: userDetailsData.first_name,\n          last_name: userDetailsData.last_name,\n          phone: userDetailsData.phone,\n          reference_id: referenceId\n        },\n        hostAuthToken,\n        apiBaseURL\n      );\n\n      if (!userResponse.success || !userResponse.user_id) {\n        console.error('❌ User creation failed:', userResponse.message);\n        return {\n          step: 'create_user',\n          success: false,\n          message: `User creation failed: ${userResponse.message}`,\n          data: {\n            login_response: loginResponse,\n            host_tokens: loginResponse.data.host_tokens\n          },\n          error_details: userResponse.error_details\n        };\n      }\n\n      const userId = userResponse.user_id;\n      const freshchatUserId = userResponse.freshchat_user_id || '';\n      console.log('✅ User created successfully:', { userId, freshchatUserId });\n\n      // Step 3: Create session\n      console.log('Step 3: Creating session...');\n      const sessionResponse = await createSession(\n        {\n          user_id: userId,\n          auth_token: loginResponse.data.auth_token || hostAuthToken,\n          metadata: {\n            jewelerid: userDetailsData.jewelerid,\n            userName: userDetailsData.userName,\n            email: userDetailsData.email,\n            first_name: userDetailsData.first_name,\n            last_name: userDetailsData.last_name,\n            phone: userDetailsData.phone,\n            reference_id: referenceId,\n            login_timestamp: new Date().toISOString(),\n            flow_version: '1.0'\n          }\n        },\n        hostAuthToken, // Pass the hardcoded host auth token\n        apiBaseURL\n      );\n\n      if (!sessionResponse.success || !sessionResponse.session_id) {\n        console.error('❌ Session creation failed:', sessionResponse.message);\n        return {\n          step: 'create_session',\n          success: false,\n          message: `Session creation failed: ${sessionResponse.message}`,\n          data: {\n            login_response: loginResponse,\n            host_tokens: loginResponse.data.host_tokens,\n            user_id: userId,\n            freshchat_user_id: freshchatUserId\n          },\n          error_details: sessionResponse.error_details\n        };\n      }\n\n      const sessionId = sessionResponse.session_id;\n      const authToken = loginResponse.data.auth_token || hostAuthToken;\n      console.log('✅ Session created successfully:', { sessionId });\n\n      // Step 4: Store complete authentication data\n      console.log('Step 4: Storing complete authentication data...');\n      const completeAuthData: ICompleteAuthData = {\n        // Authentication info\n        jewelerid: userDetailsData.jewelerid,\n        userName: userDetailsData.userName,\n        isAuthenticated: true,\n        \n        // Host tokens\n        host_auth_token: hostAuthToken,\n        host_tokens: loginResponse.data.host_tokens,\n        \n        // User info\n        user_id: userId,\n        freshchat_user_id: freshchatUserId,\n        \n        // Session info\n        session_id: sessionId,\n        auth_token: authToken,\n        \n        // Timestamps\n        login_timestamp: new Date().toISOString(),\n        user_created_timestamp: new Date().toISOString(),\n        session_created_timestamp: new Date().toISOString(),\n        \n        // Metadata\n        login_count: this.getLoginCount(userDetailsData.jewelerid) + 1,\n        flow_version: '1.0'\n      };\n\n      // Store the complete auth data\n      this.storeCompleteAuthData(completeAuthData);\n      \n      console.log('✅ Complete authentication flow successful!');\n      console.log('📊 Auth Summary:', {\n        jewelerid: userDetailsData.jewelerid,\n        email: userDetailsData.email,\n        full_name: `${userDetailsData.first_name} ${userDetailsData.last_name}`,\n        phone: userDetailsData.phone,\n        reference_id: referenceId,\n        user_id: userId,\n        session_id: sessionId,\n        freshchat_user_id: freshchatUserId,\n        has_host_token: !!hostAuthToken\n      });\n\n      return {\n        step: 'complete',\n        success: true,\n        message: 'Complete authentication flow successful',\n        data: {\n          login_response: loginResponse,\n          host_tokens: loginResponse.data.host_tokens,\n          user_id: userId,\n          freshchat_user_id: freshchatUserId,\n          session_id: sessionId,\n          auth_token: authToken,\n          complete_auth_data: completeAuthData\n        }\n      };\n\n    } catch (error) {\n      console.error('❌ Complete authentication flow error:', error);\n      return {\n        step: 'error',\n        success: false,\n        message: 'Internal error during authentication flow',\n        error_details: {\n          error: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n\n  /**\n   * Legacy authentication flow (backward compatibility)\n   * This version tries to extract user details from userName (email)\n   */\n  async completeAuthenticationFlow(\n    loginData: ILoginFormData,\n    apiBaseURL?: string\n  ): Promise<ICompleteAuthFlow> {\n    // Convert basic login data to user details format\n    const emailParts = loginData.userName.split('@');\n    const firstName = emailParts[0] || 'User';\n    const lastName = emailParts[1]?.split('.')[0] || 'Name';\n\n    const userDetailsData: IUserDetailsFormData = {\n      jewelerid: loginData.jewelerid,\n      userName: loginData.userName,\n      password: loginData.password,\n      email: loginData.userName, // userName is email\n      first_name: firstName,\n      last_name: lastName,\n      phone: '', // No phone provided in basic form\n      reference_id: `${firstName.toLowerCase()}@${lastName.toLowerCase()}`\n    };\n\n    console.log('⚠️ Using legacy authentication flow - consider using completeAuthenticationFlowWithDetails for better user data');\n    return this.completeAuthenticationFlowWithDetails(userDetailsData, apiBaseURL);\n  }\n\n  /**\n   * Quick authentication flow with user details\n   */\n  async authenticateUserWithDetails(\n    jewelerid: string,\n    userName: string,\n    password: string,\n    email: string,\n    firstName: string,\n    lastName: string,\n    phone: string,\n    referenceId?: string,\n    apiBaseURL?: string\n  ): Promise<ICompleteAuthFlow> {\n    return this.completeAuthenticationFlowWithDetails({\n      jewelerid,\n      userName,\n      password,\n      email,\n      first_name: firstName,\n      last_name: lastName,\n      phone,\n      reference_id: referenceId\n    }, apiBaseURL);\n  }\n\n  /**\n   * Quick authentication flow (simplified parameters) - Legacy\n   */\n  async authenticateUser(\n    jewelerid: string,\n    userName: string,\n    password: string,\n    apiBaseURL?: string\n  ): Promise<ICompleteAuthFlow> {\n    return this.completeAuthenticationFlow(\n      { jewelerid, userName, password },\n      apiBaseURL\n    );\n  }\n\n  /**\n   * Store complete authentication data in localStorage\n   */\n  private storeCompleteAuthData(authData: ICompleteAuthData): void {\n    if (typeof window === 'undefined') return;\n\n    try {\n      // Store main auth data\n      const authKey = `complete_auth_${authData.jewelerid}`;\n      localStorage.setItem(authKey, JSON.stringify(authData));\n\n      // Store quick lookup data\n      localStorage.setItem('current_auth_jewelerid', authData.jewelerid);\n      localStorage.setItem('current_auth_user_id', authData.user_id);\n      localStorage.setItem('current_auth_session_id', authData.session_id);\n      localStorage.setItem('current_auth_host_token', authData.host_auth_token);\n\n      // Store credentials (without password)\n      const credentials: IStoredAuthCredentials = {\n        jewelerid: authData.jewelerid,\n        userName: authData.userName,\n        lastLogin: authData.login_timestamp,\n        loginCount: authData.login_count,\n        hostTokens: authData.host_tokens,\n        sessionInfo: {\n          sessionId: authData.session_id,\n          userId: authData.user_id,\n          authToken: authData.auth_token\n        }\n      };\n      localStorage.setItem(`auth_credentials_${authData.jewelerid}`, JSON.stringify(credentials));\n\n      // Update login count\n      localStorage.setItem(`login_count_${authData.jewelerid}`, authData.login_count.toString());\n\n      console.log('💾 Complete authentication data stored in localStorage');\n\n    } catch (error) {\n      console.error('Error storing complete auth data:', error);\n    }\n  }\n\n  /**\n   * Get login count for jeweler\n   */\n  private getLoginCount(jewelerid: string): number {\n    if (typeof window === 'undefined') return 0;\n\n    try {\n      const count = localStorage.getItem(`login_count_${jewelerid}`);\n      return count ? parseInt(count, 10) : 0;\n    } catch (error) {\n      console.error('Error getting login count:', error);\n      return 0;\n    }\n  }\n}\n\n// Default instance\nexport const authFlowAPI = new AuthFlowAPI();\n\n// Individual functions for easier imports\n\n// Enhanced functions with user details\nexport const completeAuthenticationFlowWithDetails = (\n  userDetailsData: IUserDetailsFormData,\n  apiBaseURL?: string\n) => authFlowAPI.completeAuthenticationFlowWithDetails(userDetailsData, apiBaseURL);\n\nexport const authenticateUserWithDetails = (\n  jewelerid: string,\n  userName: string,\n  password: string,\n  email: string,\n  firstName: string,\n  lastName: string,\n  phone: string,\n  referenceId?: string,\n  apiBaseURL?: string\n) => authFlowAPI.authenticateUserWithDetails(jewelerid, userName, password, email, firstName, lastName, phone, referenceId, apiBaseURL);\n\n// Legacy functions (backward compatibility)\nexport const completeAuthenticationFlow = (\n  loginData: ILoginFormData,\n  apiBaseURL?: string\n) => authFlowAPI.completeAuthenticationFlow(loginData, apiBaseURL);\n\nexport const authenticateUser = (\n  jewelerid: string,\n  userName: string,\n  password: string,\n  apiBaseURL?: string\n) => authFlowAPI.authenticateUser(jewelerid, userName, password, apiBaseURL);\n\n/**\n * LocalStorage Management Functions for Authentication\n */\n\n/**\n * Get complete authentication data by jeweler ID\n */\nexport const getCompleteAuthData = (jewelerid: string): ICompleteAuthData | null => {\n  if (typeof window === 'undefined') return null;\n\n  try {\n    const authKey = `complete_auth_${jewelerid}`;\n    const storedData = localStorage.getItem(authKey);\n\n    if (storedData) {\n      return JSON.parse(storedData);\n    }\n\n    return null;\n  } catch (error) {\n    console.error('Error retrieving complete auth data:', error);\n    return null;\n  }\n};\n\n/**\n * Get current authentication data (last logged in)\n */\nexport const getCurrentAuthData = (): ICompleteAuthData | null => {\n  if (typeof window === 'undefined') return null;\n\n  try {\n    const currentJewelerid = localStorage.getItem('current_auth_jewelerid');\n    \n    if (currentJewelerid) {\n      return getCompleteAuthData(currentJewelerid);\n    }\n\n    return null;\n  } catch (error) {\n    console.error('Error retrieving current auth data:', error);\n    return null;\n  }\n};\n\n/**\n * Check if user is authenticated\n */\nexport const isUserAuthenticated = (jewelerid?: string): boolean => {\n  if (typeof window === 'undefined') return false;\n\n  try {\n    const authData = jewelerid ? \n      getCompleteAuthData(jewelerid) : \n      getCurrentAuthData();\n\n    return authData?.isAuthenticated || false;\n  } catch (error) {\n    console.error('Error checking authentication status:', error);\n    return false;\n  }\n};\n\n/**\n * Get current host auth token\n */\nexport const getCurrentHostAuthToken = (): string | null => {\n  if (typeof window === 'undefined') return null;\n\n  try {\n    return localStorage.getItem('current_auth_host_token');\n  } catch (error) {\n    console.error('Error getting current host auth token:', error);\n    return null;\n  }\n};\n\n/**\n * Get current user ID\n */\nexport const getCurrentUserId = (): string | null => {\n  if (typeof window === 'undefined') return null;\n\n  try {\n    return localStorage.getItem('current_auth_user_id');\n  } catch (error) {\n    console.error('Error getting current user ID:', error);\n    return null;\n  }\n};\n\n/**\n * Get current session ID\n */\nexport const getCurrentSessionId = (): string | null => {\n  if (typeof window === 'undefined') return null;\n\n  try {\n    return localStorage.getItem('current_auth_session_id');\n  } catch (error) {\n    console.error('Error getting current session ID:', error);\n    return null;\n  }\n};\n\n/**\n * Get authentication state for UI\n */\nexport const getAuthenticationState = (jewelerid?: string): IAuthenticationState => {\n  const authData = jewelerid ? \n    getCompleteAuthData(jewelerid) : \n    getCurrentAuthData();\n\n  return {\n    isAuthenticated: authData?.isAuthenticated || false,\n    isAuthenticating: false, // This would be managed by UI state\n    loginError: null, // This would be managed by UI state\n    lastLoginAttempt: authData?.login_timestamp,\n    loginSuccess: authData?.isAuthenticated || false\n  };\n};\n\n/**\n * Clear authentication data\n */\nexport const clearAuthenticationData = (jewelerid?: string): boolean => {\n  if (typeof window === 'undefined') return false;\n\n  try {\n    if (jewelerid) {\n      // Clear specific jeweler data\n      localStorage.removeItem(`complete_auth_${jewelerid}`);\n      localStorage.removeItem(`auth_credentials_${jewelerid}`);\n      localStorage.removeItem(`login_count_${jewelerid}`);\n      \n      // Clear current data if it matches\n      const currentJewelerid = localStorage.getItem('current_auth_jewelerid');\n      if (currentJewelerid === jewelerid) {\n        localStorage.removeItem('current_auth_jewelerid');\n        localStorage.removeItem('current_auth_user_id');\n        localStorage.removeItem('current_auth_session_id');\n        localStorage.removeItem('current_auth_host_token');\n      }\n    } else {\n      // Clear current authentication data\n      const currentJewelerid = localStorage.getItem('current_auth_jewelerid');\n      if (currentJewelerid) {\n        localStorage.removeItem(`complete_auth_${currentJewelerid}`);\n        localStorage.removeItem(`auth_credentials_${currentJewelerid}`);\n      }\n      \n      localStorage.removeItem('current_auth_jewelerid');\n      localStorage.removeItem('current_auth_user_id');\n      localStorage.removeItem('current_auth_session_id');\n      localStorage.removeItem('current_auth_host_token');\n    }\n\n    console.log('🗑️ Authentication data cleared');\n    return true;\n  } catch (error) {\n    console.error('Error clearing authentication data:', error);\n    return false;\n  }\n};\n\n/**\n * Clear all authentication data for all jewelers\n */\nexport const clearAllAuthenticationData = (): boolean => {\n  if (typeof window === 'undefined') return false;\n\n  try {\n    const keys = Object.keys(localStorage);\n    let removedCount = 0;\n\n    for (const key of keys) {\n      if (key.startsWith('complete_auth_') || \n          key.startsWith('auth_credentials_') || \n          key.startsWith('login_count_') ||\n          key.startsWith('current_auth_')) {\n        localStorage.removeItem(key);\n        removedCount++;\n      }\n    }\n\n    console.log(`🗑️ Cleared ${removedCount} authentication items`);\n    return true;\n  } catch (error) {\n    console.error('Error clearing all authentication data:', error);\n    return false;\n  }\n};\n\n/**\n * Get all stored jeweler IDs\n */\nexport const getAllStoredJewelerIds = (): string[] => {\n  if (typeof window === 'undefined') return [];\n\n  try {\n    const keys = Object.keys(localStorage);\n    const jewelerIds = [];\n\n    for (const key of keys) {\n      if (key.startsWith('complete_auth_')) {\n        const jewelerid = key.replace('complete_auth_', '');\n        jewelerIds.push(jewelerid);\n      }\n    }\n\n    return jewelerIds;\n  } catch (error) {\n    console.error('Error getting stored jeweler IDs:', error);\n    return [];\n  }\n};","/**\n * AshiD Diamonds API - Main Export File\n * \n * This file exports all API services and types for easy import throughout the application.\n * Organized by feature and functionality for the AshiD widget integration.\n * \n * Usage:\n * import { authAPI, productsAPI, cartAPI, api } from '@/services/api';\n * \n * Or import specific APIs:\n * import { authAPI } from '@/services/api/auth';\n * import { productsAPI } from '@/services/api/products';\n */\n\n// Core API Client and Types\nexport { apiClient, default as ApiClient } from './client';\nexport * from './types';\n\n// Individual API Services\nexport { authAPI, AuthAPI } from './auth';\nexport { productsAPI, ProductsAPI } from './products';\nexport { cartAPI, CartAPI } from './cart';\nexport { quotationsAPI, QuotationsAPI } from './quotations';\nexport { wishlistAPI, WishlistAPI } from './wishlist';\nexport { specialOrdersAPI, SpecialOrdersAPI } from './special-orders';\nexport { customQuoteAPI, CustomQuoteAPI } from './customquote';\nexport { orderStatusAPI, OrderStatusAPI } from './order-status';\nexport { catalogProgramAPI, CatalogProgramAPI } from './catalog-program';\nexport { emailAPI, EmailAPI } from './email';\n\n// Internal User API (Primary - replaces direct Freshchat user creation)\nexport { \n  internalUserAPI,\n  InternalUserAPI,\n  createInternalUser,\n  createInternalUserSimplified,\n  getStoredInternalUser,\n  getLastCreatedInternalUserId,\n  getLastCreatedInternalFreshchatUserId,\n  getFreshchatUserIdByUserId,\n  getUserIdsByReferenceId,\n  getAllStoredInternalUsers,\n  isInternalUserStoredLocally,\n  getHostAuthToken\n} from './internal-user';\n\n// Session API (Primary - replaces existing session management)\nexport {\n  sessionAPI,\n  SessionAPI,\n  createSession,\n  createSessionSimplified,\n  getStoredSession,\n  getLastCreatedSessionId,\n  getCurrentActiveSessionId,\n  getUserIdBySessionId,\n  getAllStoredSessions,\n  isSessionStoredLocally,\n  removeStoredSession,\n  clearAllStoredSessions,\n  setCurrentActiveSession\n} from './session';\n\n// Chat API (Primary - handles AI chat with Freshchat handoff)\nexport {\n  chatAPI,\n  ChatAPI,\n  sendChatMessage,\n  sendSimpleChatMessage,\n  getConversationMapping,\n  getConversationMappingByConversationId,\n  getConversationMappingByFreshchatId,\n  getAllConversationMappings,\n  isConversationHandedOffToHuman,\n  clearConversationMapping,\n  clearAllConversationMappings\n} from './chat';\n\n// Complete Authentication Flow (Primary - handles login → createUser → createSession)\nexport {\n  authFlowAPI,\n  AuthFlowAPI,\n  // Enhanced functions with user details\n  completeAuthenticationFlowWithDetails,\n  authenticateUserWithDetails,\n  // Legacy functions (backward compatibility)\n  completeAuthenticationFlow,\n  authenticateUser,\n  // Storage and state management\n  getCompleteAuthData,\n  getCurrentAuthData,\n  isUserAuthenticated,\n  getCurrentHostAuthToken,\n  getCurrentUserId,\n  getCurrentSessionId,\n  getAuthenticationState,\n  clearAuthenticationData,\n  clearAllAuthenticationData,\n  getAllStoredJewelerIds\n} from './auth-flow';\n\n// Freshchat API (For messaging and conversation management)\nexport { \n  freshchatAPI, \n  FreshchatAPI, \n  createFreshchatUser, \n  getFreshchatUserByReferenceId, \n  getFreshchatUserById, \n  updateFreshchatUserProperties,\n  sendFreshchatMessage,\n  sendFreshchatTextMessage,\n  sendFreshchatMessageWithQuickReplies,\n  sendFreshchatMessageWithUrlButtons,\n  sendFreshchatMessageWithMixedButtons,\n  getFreshchatConversation,\n  getStoredFreshchatUser,\n  getLastCreatedFreshchatUserId,\n  getAllStoredFreshchatUsers,\n  removeStoredFreshchatUser,\n  clearAllStoredFreshchatUsers,\n  isUserStoredLocally\n} from './freshchat';\n\n// Import the new APIs for the unified class\nimport { customQuoteAPI } from './customquote';\nimport { orderStatusAPI } from './order-status';\nimport { catalogProgramAPI } from './catalog-program';\nimport { emailAPI } from './email';\nimport { freshchatAPI } from './freshchat';\nimport { internalUserAPI } from './internal-user';\nimport { sessionAPI } from './session';\nimport { chatAPI } from './chat';\nimport { authFlowAPI } from './auth-flow';\n\n// Re-export common types for convenience\nexport type {\n  // Response Types\n  IApiResponse,\n  IApiError,\n  \n  // Authentication Types\n  ILoginRequest,\n  ILoginResponse,\n  IAuthState,\n  \n  // Product Types\n  IProduct,\n  IProductDetails,\n  IProductVariant,\n  IProductSearchParams,\n  IProductSearchResponse,\n  \n  // Cart Types\n  ICart,\n  ICartItem,\n  IAddToCartRequest,\n  IPlaceOrderRequest,\n  IOrder,\n  \n  // Quotation Types\n  IQuotation,\n  IQuotationItem,\n  ICreateQuotationRequest,\n  IAddQuotationItemRequest,\n  \n  // Wishlist Types\n  IWishlist,\n  IWishlistItem,\n  IAddToWishlistRequest,\n  \n  // Special Order Types\n  ISpecialOrderOptions,\n  ISpecialOrderVariant,\n  \n  // Chat Types (for future use)\n  IChatMessage,\n  IChatSession,\n  \n  // Internal User API Types\n  IInternalUserRequest,\n  IInternalUserResponse,\n  \n  // Session API Types\n  ICreateSessionRequest,\n  ICreateSessionResponse,\n  \n  // Chat API Types\n  IChatRequest,\n  IChatResponse,\n  IChatAgentState,\n  IChatStateMessage,\n  IConversationMapping,\n  \n  // Authentication Flow Types\n  ILoginFormData,\n  IUserDetailsFormData,\n  ICompleteLoginFormData,\n  IAuthenticationState,\n  IStoredAuthCredentials,\n  IHostTokens,\n  ICompleteAuthFlow,\n  ICompleteAuthData,\n  \n  // Freshchat Types\n  IFreshchatUserRequest,\n  IFreshchatUserResponse,\n  IFreshchatUser,\n  IFreshchatProperty,\n  IFreshchatAPIPayload,\n  IFreshchatUsersResponse,\n  IFreshchatSendMessageRequest,\n  IFreshchatSendMessageResponse,\n  IFreshchatGetConversationResponse,\n  IFreshchatMessage,\n  IFreshchatConversation,\n  IFreshchatMessagePart,\n  IFreshchatQuickReplyButton,\n  IFreshchatUrlButton,\n  IFreshchatReplyPart,\n  \n  // Utility Types\n  IPaginationParams,\n  IPaginatedResponse,\n  IApiConfig,\n} from './types';\n\n/**\n * Unified API Service Class\n * Provides a single interface to all API services with shared configuration\n */\nexport class AshiDAPI {\n  // Individual API services\n  // public readonly auth = authAPI;\n  // public readonly products = productsAPI;\n  // public readonly cart = cartAPI;\n  // public readonly quotations = quotationsAPI;\n  // public readonly wishlist = wishlistAPI;\n  // public readonly specialOrders = specialOrdersAPI;\n  // public readonly customQuote = customQuoteAPI;\n  // public readonly orderStatus = orderStatusAPI;\n  // public readonly catalogProgram = catalogProgramAPI;\n  // public readonly email = emailAPI;\n  // public readonly freshchat = freshchatAPI;\n  // public readonly internalUser = internalUserAPI;\n  // public readonly session = sessionAPI;\n  // public readonly chat = chatAPI;\n  // public readonly authFlow = authFlowAPI;\n  \n  // API client for direct access\n  // public readonly client = apiClient;\n\n  constructor() {\n    // Initialize any global configurations or event listeners\n    this.setupGlobalErrorHandling();\n  }\n\n  /**\n   * Setup global error handling for all API calls\n   */\n  private setupGlobalErrorHandling(): void {\n    if (typeof window !== 'undefined') {\n      // Listen for authentication errors\n      window.addEventListener('auth:expired', () => {\n        console.warn('Authentication expired - user needs to login again');\n        // Could dispatch to a global state management system here\n      });\n\n      // Listen for logout events\n      window.addEventListener('auth:logout', () => {\n        console.info('User logged out');\n        // Could dispatch to a global state management system here\n      });\n    }\n  }\n\n  /**\n   * Initialize the API with configuration\n   */\n  public initialize(config: Partial<{\n    baseURL: string;\n    timeout: number;\n    retries: number;\n    defaultHeaders: Record<string, string>;\n  }> = {}): void {\n    // this.client.updateConfig({\n    //   baseURL: config.baseURL || process.env.NEXT_PUBLIC_ASHID_API_URL || 'https://aichatbotbeta.ashidiamonds.com',\n    //   timeout: config.timeout || 30000,\n    //   retries: config.retries || 3,\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //     'Accept': 'application/json',\n    //     ...config.defaultHeaders,\n    //   },\n    // });\n\n    console.info('AshiD API initialized', {\n      baseURL: config.baseURL || process.env.NEXT_PUBLIC_ASHID_API_URL || 'https://aichatbotbeta.ashidiamonds.com',\n      isAuthenticated: false,\n    });\n  }\n\n  /**\n   * Check overall API health\n   */\n  public async healthCheck(): Promise<{\n    client: boolean;\n    authentication: boolean;\n    timestamp: string;\n  }> {\n    const timestamp = new Date().toISOString();\n    \n    try {\n      // const clientHealth = await this.client.healthCheck();\n      // const authHealth = this.auth.isAuthenticated();\n      const clientHealth = true;\n      const authHealth = false;\n\n      return {\n        client: clientHealth,\n        authentication: authHealth,\n        timestamp,\n      };\n    } catch (error) {\n      return {\n        client: false,\n        authentication: false,\n        timestamp,\n      };\n    }\n  }\n\n  /**\n   * Clear all cached data and authentication\n   */\n  public clearAllData(): void {\n    // this.auth.logout();\n    \n    // Clear any other cached data if needed\n    if (typeof window !== 'undefined') {\n      // Could clear other localStorage items related to the API\n      const keysToRemove = Object.keys(localStorage).filter(key => \n        key.startsWith('ashid_') || key.startsWith('ashi_')\n      );\n      \n      keysToRemove.forEach(key => {\n        localStorage.removeItem(key);\n      });\n    }\n  }\n\n  /**\n   * Get current user context (auth + basic info)\n   */\n  public getCurrentContext(): {\n    isAuthenticated: boolean;\n    user: any;\n    permissions: string[];\n    lastActivity: Date | null;\n  } {\n    // const auth = this.auth.getAuthState();\n    const auth = { isAuthenticated: false, userInfo: null, expiresAt: null };\n    \n    return {\n      isAuthenticated: auth.isAuthenticated,\n      user: auth.userInfo,\n      permissions: [], // Could be extracted from JWT or user info\n      lastActivity: auth.expiresAt,\n    };\n  }\n\n  /**\n   * Setup authentication from stored credentials\n   */\n  public async restoreAuthentication(): Promise<boolean> {\n    try {\n      // const auth = this.auth.getAuthState();\n      const auth = { isAuthenticated: false, token: null };\n      \n      if (auth.isAuthenticated && auth.token) {\n        // Verify token is still valid by making a test API call\n        // const healthCheck = await this.client.healthCheck();\n        const healthCheck = true;\n        \n        if (!healthCheck) {\n          // Token is invalid, clear it\n          // this.auth.logout();\n          return false;\n        }\n        \n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      // this.auth.logout();\n      return false;\n    }\n  }\n}\n\n// Export singleton instance for easy use\nexport const api = new AshiDAPI();\n\n// Default export for convenience\nexport default api;\n\n/**\n * React Hook for API (example for future implementation)\n * This would be implemented with React Query or similar\n */\nexport const useAshiDAPI = () => {\n  return {\n    api,\n    isAuthenticated: false, // api.auth.isAuthenticated(),\n    healthCheck: api.healthCheck,\n    initialize: api.initialize,\n  };\n};\n\n/**\n * API Configuration Constants\n */\nexport const API_CONFIG = {\n  BASE_URLS: {\n    PRODUCTION: 'https://aichatbotbeta.ashidiamonds.com',\n    STAGING: 'https://staging.ashidiamonds.com', // If exists\n    DEVELOPMENT: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000',\n  },\n  TIMEOUTS: {\n    DEFAULT: 30000,\n    UPLOAD: 60000,\n    DOWNLOAD: 45000,\n  },\n  RETRY_CONFIG: {\n    ATTEMPTS: 3,\n    DELAY: 1000,\n    BACKOFF_FACTOR: 2,\n  },\n  PAGINATION: {\n    DEFAULT_LIMIT: 20,\n    MAX_LIMIT: 100,\n  },\n} as const;\n\n/**\n * API Endpoints Reference\n * Useful for documentation and testing\n */\nexport const API_ENDPOINTS = {\n  AUTH: {\n    LOGIN: '/api/authentication/login',\n  },\n  PRODUCTS: {\n    SEARCH: '/api/products/search',\n    DETAILS: '/api/products/{style_id}/details',\n    VARIANTS: '/api/products/{style_id}/variants',\n    SPECIFICATIONS: '/api/products/{style_id}/specifications',\n  },\n  CART: {\n    VIEW: '/api/cart',\n    ADD: '/api/cart/add',\n    PLACE_ORDER: '/api/cart/placeorder',\n  },\n  QUOTATIONS: {\n    CREATE: '/api/salesquotation/create',\n    ADD_ITEM: '/api/salesquotation/additem',\n    REMOVE_ITEMS: '/api/salesquotation/removeitems',\n    MOVE_TO_CART: '/api/salesquotation/movetocart',\n  },\n  WISHLIST: {\n    VIEW: '/api/wishlist',\n    ADD: '/api/wishlist/add',\n    MOVE_TO_CART: '/api/wishlist/movetocart',\n  },\n  SPECIAL_ORDERS: {\n    OPTIONS: '/api/specialorder/special_order_options',\n    CHECK_VARIANT: '/api/specialorder/checkspovariant',\n  },\n} as const;\n\nconsole.info('AshiD API module loaded', {\n  version: '1.0.0',\n  endpoints: Object.keys(API_ENDPOINTS).length,\n  services: ['auth', 'products', 'cart', 'quotations', 'wishlist', 'specialOrders', 'customQuote', 'orderStatus', 'catalogProgram', 'email', 'internalUser', 'session', 'chat', 'authFlow', 'freshchat'],\n});"]}